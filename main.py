import os
import asyncio
import logging
import json
from dataclasses import dataclass, field
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from typing import Dict, Optional
from datetime import datetime
import aiohttp
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
import nest_asyncio

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# ======================================================
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHAT_ID_ENV = os.getenv("CHAT_ID")
DEFAULT_CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None
API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

if not BOT_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ BOT_TOKEN –∞–±–æ ALERTS_TOKEN")

# ======================================================
# üîπ –õ–æ–∫–∞–ª—å–Ω–∏–π HTTP —Å–µ—Ä–≤–µ—Ä (healthcheck)
# ======================================================
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω—ñ –∫–ª–∞—Å–∏ —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# ======================================================
@dataclass
class RegionAlertCache:
    last_alerts: Dict[str, str] = field(default_factory=dict)
    initialized: bool = False

ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

def get_chat_id(app) -> Optional[int]:
    chat_id = app.bot_data.get("chat_id")
    if chat_id:
        return int(chat_id)
    default_chat = app.bot_data.get("default_chat_id")
    return int(default_chat) if default_chat else None

async def send_photo_safe(bot, chat_id: Optional[int], image_path: str):
    if not chat_id:
        return
    try:
        with open(image_path, "rb") as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except Exception:
        pass

async def _get_api_data():
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL, headers=headers, timeout=10) as resp:
            return await resp.json()

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞
# ======================================================
def load_locations_dict() -> Dict:
    file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "locations_dict.json")
    if not os.path.exists(file_path):
        logging.warning("‚ö†Ô∏è –°–ª–æ–≤–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª.")
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump({"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": {}}, f, ensure_ascii=False, indent=2)
    with open(file_path, "r", encoding="utf-8") as f:
        return json.load(f)

def save_locations_dict(data: Dict):
    file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "locations_dict.json")
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ======================================================
# üîπ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ö–∏—ó–≤—â–∏–Ω–∏ (–ú–†–ß)
# ======================================================
async def process_alerts(app, cache: RegionAlertCache):
    data = await _get_api_data()
    alerts = data.get("alerts", [])
    relevant = [a for a in alerts if a.get("location_oblast") in {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤"}]
    new_state = {a["location_title"]: a["alert_type"] for a in relevant}
    chat_id = get_chat_id(app)
    logging.info(f"‚è± –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å @ {datetime.now().strftime('%H:%M:%S')}")

    if not cache.initialized:
        cache.last_alerts = new_state
        cache.initialized = True
        return

    # –Ω–æ–≤—ñ –∞–±–æ –∑–º—ñ–Ω–µ–Ω—ñ
    for raion, alert_type in new_state.items():
        if cache.last_alerts.get(raion) != alert_type and chat_id:
            await send_photo_safe(app.bot, chat_id, "images/Alarm.jpg")
            await app.bot.send_message(
                chat_id=chat_id,
                text=f"üö® *{raion}* ‚Äî *{ALERT_TYPES_UA.get(alert_type, alert_type)}*",
                parse_mode="Markdown",
            )

    # –≤—ñ–¥–±–æ—ó
    for raion in list(cache.last_alerts.keys()):
        if raion not in new_state and chat_id:
            await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É *{raion}*", parse_mode="Markdown")

    # –∑–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥–±—ñ–π
    if cache.last_alerts and not new_state and chat_id:
        await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}")
        await send_photo_safe(app.bot, chat_id, "images/Clear.jpg")

    cache.last_alerts = new_state

# ======================================================
# üîπ –•–µ–Ω–¥–ª–µ—Ä —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
# ======================================================
async def handle_dynamic_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").lower().strip()
    if not text.startswith("—â–æ –ø–æ"):
        return

    locations = context.application.bot_data.get("locations_dict", {}).get("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", {})
    keyword = text.replace("—â–æ –ø–æ", "").replace("?", "").strip().lower()

    region = None
    for key, val in locations.items():
        if keyword in key.lower():
            region = val
            break

    if not region:
        # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–∏—Ç–∞–Ω–Ω—è
        markup = ReplyKeyboardMarkup([[KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ")]], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "ü§î –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—É –≥—Ä—É–ø–∏ —â–æ–± –¥–æ–¥–∞—Ç–∏? (—Ç–∞–∫/–Ω—ñ)",
            reply_markup=markup,
        )
        context.user_data["pending_location"] = keyword
        return

    cache: RegionAlertCache = context.application.bot_data.get("alert_cache", RegionAlertCache())
    active_alerts = cache.last_alerts or {}
    if region in active_alerts:
        await update.message.reply_text(f"üö® –£ {region} —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text(f"‚úÖ –£ {region} –∑–∞—Ä–∞–∑ –≤—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ.")

# ======================================================
# üîπ –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äú–¢–∞–∫/–ù—ñ‚Äù
# ======================================================
async def user_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() not in ["—Ç–∞–∫", "–Ω—ñ"]:
        return
    choice = update.message.text.lower()
    keyword = context.user_data.get("pending_location")
    if not keyword:
        return
    if choice == "–Ω—ñ":
        await update.message.reply_text("üôÇ –î–æ–±—Ä–µ, –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –∞–¥–º—ñ–Ω—É.")
        context.user_data.pop("pending_location", None)
        return
    # —è–∫—â–æ "—Ç–∞–∫" ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì© –ù–æ–≤–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º:\n<b>{keyword.title()}</b>\n–î–æ–¥–∞—Ç–∏ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞?",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –î–æ–¥–∞—Ç–∏"), KeyboardButton("‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏")]], resize_keyboard=True),
    )
    await update.message.reply_text("‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.")
    context.user_data.pop("pending_location", None)

# ======================================================
# üîπ –ê–¥–º—ñ–Ω-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
# ======================================================
async def admin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    text = update.message.text.strip()
    if text not in ["‚úÖ –î–æ–¥–∞—Ç–∏", "‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏"]:
        return
    if text == "‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏":
        await update.message.reply_text("üö´ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        return

    # —è–∫—â–æ ‚Äú–î–æ–¥–∞—Ç–∏‚Äù ‚Äî –ø—Ä–æ—Å–∏–º–æ –≤–∏–±—Ä–∞—Ç–∏ –æ–±–ª–∞—Å—Ç—å
    regions = [
        "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    ]
    markup = ReplyKeyboardMarkup([[KeyboardButton(r)] for r in regions], resize_keyboard=True)
    await update.message.reply_text("üåç –û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:", reply_markup=markup)
    context.user_data["awaiting_region_selection"] = True

# ======================================================
# üîπ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –æ–±–ª–∞—Å—Ç—ñ
# ======================================================
async def region_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    region = update.message.text.strip()
    if not context.user_data.get("awaiting_region_selection"):
        return
    context.user_data["awaiting_region_selection"] = False

    if region == "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":
        subregions = [
            "–í–∏—à–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë—É—á–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–§–∞—Å—Ç—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
            "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
            "–û–±—É—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë—ñ–ª–æ—Ü–µ—Ä–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω"
        ]
        markup = ReplyKeyboardMarkup([[KeyboardButton(r)] for r in subregions], resize_keyboard=True)
        await update.message.reply_text("üèûÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:", reply_markup=markup)
        context.user_data["awaiting_subregion_selection"] = True
        return

    # —è–∫—â–æ –æ–±–ª–∞—Å—Ç—å –Ω–µ –ö–∏—ó–≤—Å—å–∫–∞
    locations = load_locations_dict()
    keyword = "–Ω–æ–≤–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç"
    locations.setdefault(region, {})
    locations[region][keyword] = region
    save_locations_dict(locations)
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –ø—É–Ω–∫—Ç —É {region}.")
    context.application.bot_data["locations_dict"] = locations

# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
# ======================================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.application.bot_data["chat_id"] = update.effective_chat.id
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç üå∏ –Ø –ø–æ–≤—ñ–¥–æ–º–ª—è—é –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏ —É –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ.\n"
                                    "–ú–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏: ¬´—â–æ –ø–æ —ñ—Ä–ø–µ–Ω—é?¬ª –∞–±–æ ¬´—â–æ –ø–æ –±–æ—Ä–∏—Å–ø–æ–ª—é?¬ª")

# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# ======================================================
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    if DEFAULT_CHAT_ID:
        app.bot_data["chat_id"] = DEFAULT_CHAT_ID
        app.bot_data["default_chat_id"] = DEFAULT_CHAT_ID

    cache = RegionAlertCache()
    app.bot_data["alert_cache"] = cache
    app.bot_data["locations_dict"] = load_locations_dict()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^—â–æ –ø–æ "), handle_dynamic_query))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^(—Ç–∞–∫|–Ω—ñ)$"), user_response))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^‚úÖ –î–æ–¥–∞—Ç–∏|‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏$"), admin_choice))
    app.add_handler(MessageHandler(filters.TEXT, region_selected))

    async def _poll(context: ContextTypes.DEFAULT_TYPE):
        await process_alerts(context.application, cache)

    app.job_queue.run_repeating(_poll, interval=POLL_INTERVAL, first=0)
    app.job_queue.start()

    logging.info("‚úÖ KytsjaAlarm v7 Adaptive –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
    await app.run_polling(close_loop=False)

# ======================================================
# üîπ –ó–∞–ø—É—Å–∫
# ======================================================
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.create_task(main())
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        for task in asyncio.all_tasks():
            task.cancel()
        loop.close()
        logging.info("üõë KytsjaAlarm –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É.")
