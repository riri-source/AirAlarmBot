import os
import asyncio
import json
import logging
import nest_asyncio
from dataclasses import dataclass, field
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from typing import Dict, Optional
from datetime import datetime

import aiohttp
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# ======================================================
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHAT_ID_ENV = os.getenv("CHAT_ID")
DEFAULT_CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None
API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

if not BOT_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –∞–±–æ ALERTS_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ")

# ======================================================
# üîπ Healthcheck-—Å–µ—Ä–≤–µ—Ä
# ======================================================
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), StubHandler).serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ======================================================
# üîπ –ö–ª–∞—Å–∏ —ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
# ======================================================
@dataclass
class RegionAlertCache:
    last_alerts: Dict[str, str] = field(default_factory=dict)  # {location_title: alert_type}
    initialized: bool = False

ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

KYIV_REGIONS = [
    "–ë—É—á–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–í–∏—à–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–§–∞—Å—Ç—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–û–±—É—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë—ñ–ª–æ—Ü–µ—Ä–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–º. –ö–∏—ó–≤"
]

# ======================================================
# üîπ –•–µ–ª–ø–µ—Ä–∏ (—Å–ª–æ–≤–Ω–∏–∫, API, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
# ======================================================
def _dict_path() -> str:
    return os.path.join(os.path.dirname(os.path.abspath(__file__)), "locations_dict.json")

def load_locations_dict() -> Dict:
    path = _dict_path()
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=2)
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def save_locations_dict(data: Dict):
    with open(_dict_path(), "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def _get_api_data():
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    async with aiohttp.ClientSession() as s:
        async with s.get(API_URL, headers=headers, timeout=10) as r:
            return await r.json()

async def send_photo_safe(bot, chat_id: Optional[int], image_path: str):
    if not chat_id:
        return
    try:
        with open(image_path, "rb") as ph:
            await bot.send_photo(chat_id=chat_id, photo=ph)
    except Exception:
        pass

# ======================================================
# üîπ –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
# ======================================================
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞:", exc_info=context.error)
    try:
        if update and hasattr(update, "message") and update.message:
            await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception:
        pass

# ======================================================
# üîπ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∏–≤–æ–≥ (–ú–†–ß –ö–∏—ó–≤—â–∏–Ω–∞ + –ì–ª–æ–±–∞–ª—å–Ω–æ –∞–¥–º—ñ–Ω—É)
# ======================================================
async def process_alerts(app, cache: RegionAlertCache):
    data = await _get_api_data()
    alerts = data.get("alerts", []) or []
    chat_id = app.bot_data.get("chat_id")

    # –ö–∏—ó–≤—â–∏–Ω–∞ + –ö–∏—ó–≤ -> –≥—Ä—É–ø–∞
    relevant_kyiv = [a for a in alerts if a.get("location_oblast") in {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤"}]
    new_state_kyiv = {a.get("location_title"): a.get("alert_type") for a in relevant_kyiv}

    # –í—Å—è –£–∫—Ä–∞—ó–Ω–∞ -> –∞–¥–º—ñ–Ω—É
    new_state_global = {f"{a.get('location_oblast')} ‚Äî {a.get('location_title')}": a.get("alert_type") for a in alerts}

    # –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫: –ª–∏—à–µ –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ —Å—Ç–∞–Ω, –Ω–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏
    if not cache.initialized:
        cache.last_alerts = new_state_kyiv
        app.bot_data["last_global_alerts"] = new_state_global
        cache.initialized = True
        return

    # –ö–∏—ó–≤—â–∏–Ω–∞ ‚Üí –≥—Ä—É–ø–∞ (–Ω–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ)
    for r, t in new_state_kyiv.items():
        if cache.last_alerts.get(r) != t and chat_id:
            await send_photo_safe(app.bot, chat_id, "images/Alarm.jpg")
            await app.bot.send_message(
                chat_id=chat_id,
                text=f"üö® *{r}* ‚Äî *{ALERT_TYPES_UA.get(t or 'air_raid', '–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!')}*",
                parse_mode="Markdown"
            )
    # –ö–∏—ó–≤—â–∏–Ω–∞ ‚Üí –≥—Ä—É–ø–∞ (–≤—ñ–¥–±–æ—ó)
    for r in list(cache.last_alerts.keys()):
        if r not in new_state_kyiv and chat_id:
            await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É *{r}*", parse_mode="Markdown")
    # –ó–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥–±—ñ–π —É –ö–∏—ó–≤—Å—å–∫—ñ–π
    if cache.last_alerts and not new_state_kyiv and chat_id:
        await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}")
        await send_photo_safe(app.bot, chat_id, "images/Clear.jpg")

    # –í—Å—è –£–∫—Ä–∞—ó–Ω–∞ ‚Üí –∞–¥–º—ñ–Ω—É (–Ω–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ)
    last_global = app.bot_data.get("last_global_alerts", {})
    for key, t in new_state_global.items():
        if last_global.get(key) != t:
            await app.bot.send_message(chat_id=ADMIN_ID, text=f"üö® {key}: {ALERT_TYPES_UA.get(t or 'air_raid', '–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!')}")
    # –í—Å—è –£–∫—Ä–∞—ó–Ω–∞ ‚Üí –∞–¥–º—ñ–Ω—É (–≤—ñ–¥–±–æ—ó)
    for key in list(last_global.keys()):
        if key not in new_state_global:
            await app.bot.send_message(chat_id=ADMIN_ID, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏: {key}")

    cache.last_alerts = new_state_kyiv
    app.bot_data["last_global_alerts"] = new_state_global

# ======================================================
# üîπ –†—É—á–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ (–æ–±–ª–∞—Å—Ç—ñ / –º—ñ—Å—Ç–∞)
# ======================================================
async def region_status(keyword: str) -> bool:
    """–ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –≤ API —î –∞–∫—Ç–∏–≤–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –ø–æ –∫–ª—é—á–æ–≤–æ–º—É —Å–ª–æ–≤—É (—á–∞—Å—Ç–∫–æ–≤–∏–π –∑–±—ñ–≥ –≤ –æ–±–ª–∞—Å—Ç—ñ/–ª–æ–∫–∞—Ü—ñ—ó)."""
    data = await _get_api_data()
    kw = (keyword or "").lower()
    for a in data.get("alerts", []) or []:
        if a.get("finished_at") is None:
            oblast = (a.get("location_oblast") or "").lower()
            title = (a.get("location_title") or "").lower()
            if kw in oblast or kw in title:
                return True
    return False

async def krym_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö® –£ –ö—Ä–∏–º—É —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if await region_status("–∫—Ä–∏–º")
                                    else "‚úÖ –£ –ö—Ä–∏–º—É –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def odesa_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö® –í –û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if await region_status("–æ–¥–µ—Å")
                                    else "‚úÖ –í –û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def oblast_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö® –£ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if await region_status("–∫–∏—ó–≤—Å—å–∫–∞")
                                    else "‚úÖ –£ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def kyiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö® –£ –ö–∏—î–≤—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if await region_status("–∫–∏—ó–≤")
                                    else "‚úÖ –£ –ö–∏—î–≤—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def lugansk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö® –£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if await region_status("–ª—É–≥–∞–Ω")
                                    else "‚úÖ –£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def chernihiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö® –£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if await region_status("—á–µ—Ä–Ω—ñ–≥")
                                    else "‚úÖ –£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def frankivsk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö® –í –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if await region_status("—Ñ—Ä–∞–Ω–∫")
                                    else "‚úÖ –í –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

# ======================================================
# üîπ –°–ª–æ–≤–Ω–∏–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ + —Ñ–ª–æ—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ù–ü
# ======================================================
def _norm(s: str) -> str:
    if not s: return ""
    s = s.lower().strip()
    for bad in ["‚Äô","'","‚Äì","‚Äî","‚Äê","-",".",","]: s = s.replace(bad, " ")
    return " ".join(s.split())

async def handle_dynamic_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –≤–∏–¥—É '—â–æ –ø–æ <–Ω–∞–∑–≤—ñ>' –∑–≥—ñ–¥–Ω–æ –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–æ–º."""
    text = (update.message.text or "").lower().strip()

    # –Ω–µ —á—ñ–ø–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ñ—Ä–∞–∑–∏
    special = [
        "—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ", "—â–æ –ø–æ –∫–∏—î–≤—É", "—è–∫ —Ç–∞–º –∫—Ä–∏–º",
        "—â–æ –ø–æ –æ–¥–µ—Å", "—â–æ –ø–æ –ª—É–≥–∞–Ω", "—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫", "—â–æ –ø–æ —Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫", "—â–æ –ø–æ —ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫",
        "—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"
    ]
    if any(x in text for x in special):
        return
    if not text.startswith("—â–æ –ø–æ"):
        return

    kw_raw = text.replace("—â–æ –ø–æ", "", 1).strip().rstrip("?!,. ")
    kw = _norm(kw_raw)
    locations = context.application.bot_data.get("locations_dict", {})

    found_oblast, found_region = None, None
    # —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥
    for oblast, mapping in locations.items():
        for k, region in mapping.items():
            if kw == _norm(k):
                found_oblast, found_region = oblast, region
                break
        if found_oblast: break
    # —á–∞—Å—Ç–∫–æ–≤–∏–π –∑–±—ñ–≥
    if not found_oblast:
        for oblast, mapping in locations.items():
            for k, region in mapping.items():
                nk = _norm(k)
                if kw in nk or nk in kw:
                    found_oblast, found_region = oblast, region
                    break
            if found_oblast: break

    if not found_oblast:
        # –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ–∑–≤—ñ–ª –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∞–¥–º—ñ–Ω—É
        context.user_data["pending_add"] = kw_raw
        await update.message.reply_text("ü§î –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É? (—Ç–∞–∫/–Ω—ñ)")
        return

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    cache: RegionAlertCache = context.application.bot_data.get("alert_cache", RegionAlertCache())
    active_kyiv = cache.last_alerts or {}
    if found_oblast in {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤"}:
        is_active = found_region in active_kyiv
        msg = (f"üö® –í –æ–±–ª–∞—Å—Ç—ñ *{found_oblast}* ({found_region}) —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!"
               if is_active else
               f"‚úÖ –í –æ–±–ª–∞—Å—Ç—ñ *{found_ob–ª–∞—Å—Ç}* ({found_region}) –≤—Å–µ —Ç–∏—Ö–æ!")
        await update.message.reply_text(msg, parse_mode="Markdown")
    else:
        is_active = await region_status(found_oblast.lower())
        msg = (f"üö® –í –æ–±–ª–∞—Å—Ç—ñ *{found_oblast}* —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!"
               if is_active else
               f"‚úÖ –í –æ–±–ª–∞—Å—Ç—ñ *{found_oblast}* –≤—Å–µ —Ç–∏—Ö–æ!")
        await update.message.reply_text(msg, parse_mode="Markdown")

async def handle_user_yes_no(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î / –≤—ñ–¥—Ö–∏–ª—è—î –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É –Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ –ù–ü."""
    txt = (update.message.text or "").strip().lower()
    if txt not in {"—Ç–∞–∫", "–Ω—ñ"}:
        return
    if "pending_add" not in context.user_data:
        return

    if txt == "–Ω—ñ":
        context.user_data.pop("pending_add", None)
        await update.message.reply_text("üëå –î–æ–±—Ä–µ, –Ω–µ –¥–æ–¥–∞—î–º–æ.")
        return

    kw = context.user_data.pop("pending_add")
    app_data = context.application.bot_data
    app_data["pending_kw"] = kw
    app_data["awaiting_oblast_choice"] = True

    locs = app_data.get("locations_dict", {})
    oblasts = list(locs.keys())
    msg = f"üìç –í–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –æ–±–ª–∞—Å—Ç—ñ –¥–ª—è ¬´{kw}¬ª:\n\n"
    for i, o in enumerate(oblasts, 1):
        msg += f"{i}. {o}\n"
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg)

async def handle_admin_number_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º—ñ–Ω –æ–±–∏—Ä–∞—î –æ–±–ª–∞—Å—Ç—å (–∫—Ä–æ–∫ 1) –∞–±–æ —Ä–∞–π–æ–Ω –ö–∏—ó–≤—â–∏–Ω–∏ (–∫—Ä–æ–∫ 2)."""
    if update.effective_user.id != ADMIN_ID:
        return
    t = (update.message.text or "").strip()
    if not t.isdigit():
        return
    idx = int(t) - 1
    app_data = context.application.bot_data

    # –ö—Ä–æ–∫ 2: —Ä–∞–π–æ–Ω –ö–∏—ó–≤—â–∏–Ω–∏
    if app_data.get("awaiting_kyiv_region_choice"):
        if idx < 0 or idx >= len(KYIV_REGIONS):
            await update.message.reply_text("‚ùå –ù–µ–¥—ñ–π—Å–Ω–∏–π –Ω–æ–º–µ—Ä —Ä–∞–π–æ–Ω—É.")
            return
        region = KYIV_REGIONS[idx]
        kw = app_data.pop("pending_region_add", None)
        if not kw:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.")
            return
        loc = app_data.get("locations_dict", {})
        loc.setdefault("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", {})[kw.lower()] = region
        save_locations_dict(loc)
        app_data["locations_dict"] = load_locations_dict()
        app_data.pop("awaiting_kyiv_region_choice", None)
        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ ¬´{kw}¬ª –¥–æ {region} –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ.")
        return

    # –ö—Ä–æ–∫ 1: –æ–±–ª–∞—Å—Ç—å
    if app_data.get("awaiting_oblast_choice"):
        locs = app_data.get("locations_dict", {})
        oblasts = list(locs.keys())
        if idx < 0 or idx >= len(oblasts):
            await update.message.reply_text("‚ùå –ù–µ–¥—ñ–π—Å–Ω–∏–π –Ω–æ–º–µ—Ä –æ–±–ª–∞—Å—Ç—ñ.")
            return
        chosen = oblasts[idx]
        kw = app_data.pop("pending_kw", None)
        app_data.pop("awaiting_oblast_choice", None)
        if not kw:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.")
            return

        if chosen == "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":
            msg = "üèô –û–±—Ä–∞–Ω–æ –ö–∏—ó–≤—â–∏–Ω—É. –í–∏–±–µ—Ä–∏ —Ä–∞–π–æ–Ω:\n\n"
            for i, r in enumerate(KYIV_REGIONS, 1):
                msg += f"{i}. {r}\n"
            await update.message.reply_text(msg)
            app_data["awaiting_kyiv_region_choice"] = True
            app_data["pending_region_add"] = kw
            return

        # –Ü–Ω—à–∞ –æ–±–ª–∞—Å—Ç—å ‚Äî –∫–ª—é—á -> –Ω–∞–∑–≤–∞ –æ–±–ª–∞—Å—Ç—ñ
        locs.setdefault(chosen, {})[kw.lower()] = chosen
        save_locations_dict(locs)
        app_data["locations_dict"] = load_locations_dict()
        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ ¬´{kw}¬ª –¥–æ –æ–±–ª–∞—Å—Ç—ñ {chosen}.")
        return

# ======================================================
# üîπ –ö–æ–º–∞–Ω–¥–∏ /start, /help, /listregions, /exportdict, /stopbot
# ======================================================
async def start(update, ctx):
    """–ü—É—Å–∫ —ñ –∫–æ—Ä–æ—Ç–∫–µ –∑–≤–µ–¥–µ–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –∞–¥–º—ñ–Ω—É."""
    ctx.application.bot_data["chat_id"] = update.effective_chat.id
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç üå∏ KytsjaAlarm –∑–∞–ø—É—â–µ–Ω–æ.\n–û—Ç—Ä–∏–º—É—é –ø–æ—Ç–æ—á–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏...")

    data = await _get_api_data()
    alerts = data.get("alerts", []) or []
    if not alerts:
        msg = "‚úÖ –ó–∞—Ä–∞–∑ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ —Å–ø–æ–∫—ñ–π–Ω–æ."
    else:
        lines = []
        for a in alerts:
            t = a.get("alert_type") or "air_raid"
            lines.append(
                f"üö® {a.get('location_oblast')} ‚Äî {a.get('location_title')}: "
                f"{ALERT_TYPES_UA.get(t, '–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!')}"
            )
        msg = "üó∫ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:</b>\n" + "\n".join(lines)

    await ctx.bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode="HTML")

    if update.effective_chat.type in ("group", "supergroup"):
        await update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π. –ú–æ–Ω—ñ—Ç–æ—Ä—é –ö–∏—ó–≤—Å—å–∫—É –æ–±–ª–∞—Å—Ç—å.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üß≠ <b>–ö–æ–º–∞–Ω–¥–∏ KytsjaAlarm Bot</b>\n\n"
        "üìç <b>–û—Å–Ω–æ–≤–Ω—ñ:</b>\n"
        "<code>/start</code> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω\n"
        "<code>/help</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "<code>/stopbot</code> ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)\n\n"
        "üì° <b>–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —ñ –∑–∞–ø–∏—Ç–∏:</b>\n"
        "<code>/listregions</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –æ–±–ª–∞—Å—Ç—ñ, —è–∫—ñ –±–∞—á–∏—Ç—å API\n"
        "<code>/exportdict</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –Ω–∞–∑–≤ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)\n\n"
        "üó∫ <b>–¢–µ–∫—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏:</b>\n"
        "¬´—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ¬ª ‚Äî –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\n"
        "¬´—â–æ –ø–æ –ö–∏—î–≤—É¬ª ‚Äî –º. –ö–∏—ó–≤\n"
        "¬´—è–∫ —Ç–∞–º –ö—Ä–∏–º?¬ª ‚Äî –ö—Ä–∏–º\n"
        "¬´—â–æ –ø–æ –§—Ä–∞–Ω–∏–∫—É¬ª ‚Äî –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\n"
        "¬´—â–æ –ø–æ &lt;–Ω–∞–∑–≤—ñ&gt;¬ª ‚Äî –±—É–¥—å-—è–∫–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞\n\n"
        "üì© –Ø–∫—â–æ –±–æ—Ç—É –Ω–µ–≤—ñ–¥–æ–º–∏–π –ø—É–Ω–∫—Ç ‚Äî –≤—ñ–Ω –∑–∞–ø–∏—Ç–∞—î, —á–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è."
        "\n\nüêæ –í–µ—Ä—Å—ñ—è: KytsjaAlarm v9.3.3 RC Final"
    )
    await update.message.reply_text(help_text, parse_mode="HTML")

async def list_regions(update, ctx):
    await update.message.reply_text("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π...")
    data = await _get_api_data()
    regs = sorted(set(a.get("location_oblast") for a in (data.get("alerts", []) or []) if a.get("location_oblast")))
    txt = "üß≠ –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π, —è–∫—ñ –±–∞—á–∏—Ç—å API:\n\n" + "\n".join(f"‚Ä¢ {r}" for r in regs) if regs else "‚ùå API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–∏—Ö."
    await update.message.reply_text(txt)

async def export_dict(update, ctx):
    if update.effective_user.id != ADMIN_ID:
        return
    data = ctx.application.bot_data.get("locations_dict", {})
    await update.message.reply_text(f"<pre>{json.dumps(data, ensure_ascii=False, indent=2)}</pre>", parse_mode="HTML")

async def stopbot(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    await update.message.reply_text("üõë –ó—É–ø–∏–Ω—è—é —Ä–æ–±–æ—Ç—É...")
    try:
        await ctx.application.job_queue.stop()
        await ctx.application.stop_running()
        await ctx.application.shutdown()
        await ctx.application.stop()
        await update.message.reply_text("‚úÖ KytsjaAlarm –ø–æ–≤–Ω—ñ—Å—Ç—é –∑—É–ø–∏–Ω–µ–Ω–æ.")
        logging.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        os._exit(0)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é: {e}")

# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# ======================================================
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    if DEFAULT_CHAT_ID:
        app.bot_data["chat_id"] = DEFAULT_CHAT_ID
        app.bot_data["default_chat_id"] = DEFAULT_CHAT_ID

    cache = RegionAlertCache()
    app.bot_data["alert_cache"] = cache
    app.bot_data["locations_dict"] = load_locations_dict()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stopbot", stopbot))
    app.add_handler(CommandHandler("listregions", list_regions))
    app.add_handler(CommandHandler("exportdict", export_dict))

    # –†—É—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ (—Ñ—Ä–∞–∑–∏)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫|—â–æ –ø–æ —Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫|—â–æ –ø–æ —ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫"), frankivsk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –ª—É–≥–∞–Ω"), lugansk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"), chernihiv_alerts))

    # –°–ª–æ–≤–Ω–∏–∫–æ–≤–∏–π –∞–¥–¥–æ–Ω
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^—â–æ –ø–æ "), handle_dynamic_query))
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç–∞–∫/–Ω—ñ)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^(—Ç–∞–∫|–Ω—ñ)$"), handle_user_yes_no))
    # –í–∏–±—ñ—Ä —á–∏—Å–ª–æ–º (–∞–¥–º—ñ–Ω)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^[0-9]+$"), handle_admin_number_choice))

    app.add_error_handler(error_handler)

    async def _poll(ctx: ContextTypes.DEFAULT_TYPE):
        await process_alerts(ctx.application, cache)

    app.job_queue.run_repeating(_poll, interval=POLL_INTERVAL, first=0)
    await app.run_polling(close_loop=False)

# ======================================================
# üîπ –ó–∞–ø—É—Å–∫
# ======================================================
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
