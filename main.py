import os
import asyncio
import logging
import nest_asyncio
import aiohttp
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer

# ===== –§–µ–π–∫–æ–≤–∏–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render =====
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(('0.0.0.0', port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(level=logging.INFO)

# ===== Keep-alive =====
async def keep_alive(port: int):
    url = f"http://localhost:{port}"
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    logging.info(f"Keep-alive ping –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å: {resp.status}")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ keep-alive ping: {e}")
        await asyncio.sleep(45)

# ===== –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è =====
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
CHAT_ID = int(os.getenv("CHAT_ID"))

if not TELEGRAM_TOKEN or not ALERTS_TOKEN or not CHAT_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ –æ–¥–Ω—É –∞–±–æ –∫—ñ–ª—å–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è: BOT_TOKEN, ALERTS_TOKEN, CHAT_ID")

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

# ===== –°–ª–æ–≤–Ω–∏–∫ —Ç–∏–ø—ñ–≤ —Ç—Ä–∏–≤–æ–≥ =====
ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
}

# ===== –•–µ–Ω–¥–ª–µ—Ä–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç üå∏\n–ù–∞–ø–∏—à–∏ ¬´–©–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ¬ª —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å, –¥–µ –∑–∞—Ä–∞–∑ —Ç—Ä–∏–≤–æ–≥–∞ —É {REGION}."
    )

async def oblast_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await city_or_region_alert(update, REGION, is_region=True)

async def kyiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await city_or_region_alert(update, "–º. –ö–∏—ó–≤", is_region=False)

async def krym_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await city_or_region_alert(update, "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º", is_region=True)

async def odesa_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await city_or_region_alert(update, "–º. –û–¥–µ—Å–∞", is_region=False)

async def franyk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await city_or_region_alert(update, "–º. –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫", is_region=False)

async def city_or_region_alert(update, location_name, is_region=True):
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, timeout=10) as resp:
                data = await resp.json()

        alerts_list = [
            alert for alert in data.get("alerts", [])
            if (alert.get("location_oblast") == location_name if is_region else alert.get("location_title") == location_name)
        ]

        if not alerts_list:
            await update.message.reply_text(f"‚úÖ {location_name} ‚Äî –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ!")
            try:
                with open("images/Saefty.jpg", "rb") as photo:
                    await update.message.reply_photo(photo=photo)
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            return

        text = f"üö® *–ê–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —É {location_name}:*\n"
        for alert in alerts_list:
            raion = alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω")
            alert_type = alert.get("alert_type", "–Ω–µ–≤—ñ–¥–æ–º–æ")
            alert_type_ua = ALERT_TYPES_UA.get(alert_type, alert_type)
            text += f"‚Ä¢ {raion} ‚Äî {alert_type_ua}\n"

        await update.message.reply_markdown(text)

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API –¥–ª—è {location_name}: {e}")
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

# ===== –§–æ–Ω–æ–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è API =====
current_state = {}  # –∑–±–µ—Ä—ñ–≥–∞—î –∞–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ –ø–æ —Ä–∞–π–æ–Ω–∞—Ö/–º—ñ—Å—Ç–∞—Ö

async def poll_alerts(app):
    global current_state
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    first_run = True

    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(API_URL, headers=headers, timeout=10) as resp:
                    data = await resp.json()

            region_alerts = [alert for alert in data.get("alerts", []) if alert.get("location_oblast") == REGION]

            new_state = {alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω"): alert.get("alert_type") for alert in region_alerts}

            if first_run:
                current_state = new_state
                first_run = False
            else:
                # ===== –ù–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏ =====
                for loc, alert_type in new_state.items():
                    if loc not in current_state or current_state[loc] != alert_type:
                        try:
                            with open("images/Alarm.jpg", "rb") as photo:
                                await app.bot.send_photo(chat_id=CHAT_ID, photo=photo)
                            text = f"‚ö†Ô∏è *{loc} ‚Äî {ALERT_TYPES_UA.get(alert_type, alert_type)}*"
                            await app.bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="Markdown")
                        except Exception as e:
                            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç—Ä–∏–≤–æ–≥–∏: {e}")

                # ===== –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ =====
                for loc in list(current_state.keys()):
                    if loc not in new_state:
                        try:
                            with open("images/Clear.jpg", "rb") as photo:
                                await app.bot.send_photo(chat_id=CHAT_ID, photo=photo)
                            text = f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {loc}"
                            await app.bot.send_message(chat_id=CHAT_ID, text=text)
                        except Exception as e:
                            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–±–æ—é: {e}")

                current_state = new_state

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ API: {e}")

        await asyncio.sleep(POLL_INTERVAL)

# ===== –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Telegram =====
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error(msg="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —É —Ö–µ–Ω–¥–ª–µ—Ä—ñ:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# ===== –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª =====
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å—ñ"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫—É"), franyk_alerts))

    app.add_error_handler(error_handler)

    asyncio.create_task(poll_alerts(app))
    asyncio.create_task(keep_alive(int(os.environ.get("PORT", 10000))))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await app.run_polling()

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
