#!/usr/bin/env python3
import os
import asyncio
import logging
import time
from dataclasses import dataclass, field
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from typing import Dict, Optional
from datetime import datetime

import aiohttp
import nest_asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ================== –ö–æ–Ω—Ñ—ñ–≥ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ==================
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", "25"))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHAT_ID_ENV = os.getenv("CHAT_ID")
DEFAULT_CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None

if not BOT_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ BOT_TOKEN –∞–±–æ ALERTS_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

# –ù–ê–ó–í–ò, —è–∫—ñ –º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ —É –ú–†–ß (–∂–æ—Ä—Å—Ç–∫–æ)
MRC_OBLASTS = ("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤")

# –°–ª–æ–≤–Ω–∏–∫ human-friendly —Ç–∏–ø—ñ–≤
ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

# ================== –ü—Ä–æ—Å—Ç–∏–π healthcheck HTTP (–æ–ø—Ü—ñ–π–Ω–æ) ==================
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", "10000"))
    server = HTTPServer(("0.0.0.0", port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ================== –ö–ª–∞—Å–∏/—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ ==================
@dataclass
class RegionAlertCache:
    last_alerts: Dict[str, str] = field(default_factory=dict)
    initialized: bool = False

# ================== –•–µ–ª–ø–µ—Ä–∏ ==================
def get_chat_id(app) -> Optional[int]:
    cid = app.bot_data.get("chat_id") or app.bot_data.get("default_chat_id")
    return int(cid) if cid else None

async def send_photo_safe(bot, chat_id: Optional[int], path: str) -> bool:
    if not chat_id:
        return False
    try:
        with open(path, "rb") as f:
            await bot.send_photo(chat_id=chat_id, photo=f)
        return True
    except FileNotFoundError:
        logging.warning("send_photo_safe: —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: %s", path)
    except Exception as e:
        logging.debug("send_photo_safe –ø–æ–º–∏–ª–∫–∞: %s", e)
    return False

# ================== –ó–∞–ø–∏—Ç–∏ –¥–æ API ==================
async def _get_api_data_with_retries(attempts: int = 3, timeout: int = 10):
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    delay = 0.5
    for attempt in range(1, attempts + 1):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(API_URL, headers=headers, timeout=timeout, params={"_": int(time.time())}) as resp:
                    status = resp.status
                    data = await resp.json()
                    return data
        except Exception as e:
            logging.warning("API request attempt %d/%d failed: %s", attempt, attempts, e)
            if attempt < attempts:
                await asyncio.sleep(delay)
                delay *= 2
            else:
                logging.error("API request failed after %d attempts.", attempts)
                return {}

# ------------------ –ú–†–ß: –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å + –º. –ö–∏—ó–≤ ------------------
async def fetch_region_alerts():
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î list(alert) —Ç—ñ–ª—å–∫–∏ —Ç—ñ, –¥–µ location_oblast –Ω–∞–ª–µ–∂–∏—Ç—å MRC_OBLASTS.
    –¶–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫—É –≤–∏–∫–ª–∏–∫–∞—î –ú–†–ß ‚Äî –≤–æ–Ω–∞ –∂–æ—Ä—Å—Ç–∫–∞, –±–µ–∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ–π.
    """
    data = await _get_api_data_with_retries()
    alerts = []
    for a in data.get("alerts", []):
        ob = a.get("location_oblast")
        if ob in MRC_OBLASTS:
            alerts.append(a)
    logging.debug("fetch_region_alerts -> %d", len(alerts))
    return alerts

# ------------------ –†—É—á–Ω—ñ —Ç–æ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ (–±–µ–∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó) ------------------
async def fetch_location_alerts(location_name: str):
    """
    –ñ–æ—Ä—Å—Ç–∫–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: —à—É–∫–∞—î–º–æ –∑–∞–ø–∏—Å–∏, –¥–µ location_title == location_name
    –∞–±–æ location_oblast == location_name.
    (–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ä—É—á–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ ‚Äî –ö—Ä–∏–º, –õ—É–≥–∞–Ω—Å—å–∫–∞, –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞, –û–¥–µ—Å–∞ —ñ —Ç.–¥.)
    """
    data = await _get_api_data_with_retries()
    results = []
    for a in data.get("alerts", []):
        if a.get("location_title") == location_name or a.get("location_oblast") == location_name:
            results.append(a)
    logging.info("fetch_location_alerts('%s') -> %d", location_name, len(results))
    return results

# ================== –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è —Ä—É—á–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ ==================
async def show_alerts_for_update(update: Update, context: ContextTypes.DEFAULT_TYPE, alerts, label: str):
    if not alerts:
        await update.message.reply_text(f"‚úÖ –£ {label} –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")
        await send_photo_safe(context.application.bot, update.effective_chat.id, "images/Saefty.jpg")
        return

    text = f"üö® *–£ {label} –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞:* \n"
    for a in alerts:
        title = a.get("location_title") or a.get("location_oblast") or "–ù–µ–≤—ñ–¥–æ–º–æ"
        alert_type = ALERT_TYPES_UA.get(a.get("alert_type"), a.get("alert_type"))
        text += f"‚Ä¢ {title} ‚Äî {alert_type}\n"
    await update.message.reply_markdown(text)

# ================== Telegram —Ö–µ–Ω–¥–ª–µ—Ä–∏ (—Ä—É—á–Ω—ñ) ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    context.application.bot_data["chat_id"] = cid
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç üå∏\n"
        "–ú–†–ß –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –ö–∏—ó–≤—Å—å–∫—É –æ–±–ª–∞—Å—Ç—å + –º.–ö–∏—ó–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.\n"
        "–ú–æ–∂–µ—à –∑–∞–ø–∏—Ç–∞—Ç–∏ –≤—Ä—É—á–Ω—É: ¬´—è–∫ —Ç–∞–º –ö—Ä–∏–º¬ª, ¬´—â–æ –ø–æ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π¬ª, ¬´—â–æ –ø–æ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π¬ª, ¬´—â–æ –ø–æ –û–¥–µ—Å—ñ¬ª, ¬´—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫—É¬ª."
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cache: RegionAlertCache = context.application.bot_data.get("alert_cache") or RegionAlertCache()
    keys = ", ".join(cache.last_alerts.keys()) or "‚Äî"
    cid = get_chat_id(context.application)
    await update.message.reply_text(
        f"‚ÑπÔ∏è –ú–†–ß: –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å + –º.–ö–∏—ó–≤\n"
        f"CHAT_ID: {cid or '–Ω–µ–º–∞'}\n"
        f"POLL_INTERVAL: {POLL_INTERVAL}s\n"
        f"–ê–∫—Ç–∏–≤–Ω—ñ —Ä–∞–π–æ–Ω–∏: {keys}"
    )

# –†—É—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ‚Äî –∂–æ—Ä—Å—Ç–∫—ñ –Ω–∞–∑–≤–∏ (–±–µ–∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó)
async def krym_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    alerts = await fetch_location_alerts("–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º")
    await show_alerts_for_update(update, context, alerts, "–ö—Ä–∏–º")

async def lugansk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    alerts = await fetch_location_alerts("–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
    await show_alerts_for_update(update, context, alerts, "–õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")

async def chernihiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    alerts = await fetch_location_alerts("–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
    await show_alerts_for_update(update, context, alerts, "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")

async def odesa_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    alerts = await fetch_location_alerts("–º. –û–¥–µ—Å–∞")
    await show_alerts_for_update(update, context, alerts, "–º. –û–¥–µ—Å–∞")

async def frankivsk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    alerts = await fetch_location_alerts("–º. –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫")
    await show_alerts_for_update(update, context, alerts, "–º. –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫")

async def kyiv_manual_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —è–∫—â–æ —Ö–æ—á–µ—à —Ä—É—á–Ω–∏–π –∑–∞–ø–∏—Ç –ø–æ –º. –ö–∏—ó–≤:
    alerts = await fetch_location_alerts("–º. –ö–∏—ó–≤")
    await show_alerts_for_update(update, context, alerts, "–º. –ö–∏—ó–≤")

# ================== –ú–†–ß: –ª–æ–≥—ñ–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –æ–¥–Ω–æ–≥–æ —Ç—ñ–∫—É ==================
async def process_alerts(app, cache: RegionAlertCache):
    """
    –û–¥–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ú–†–ß: –æ—Ç—Ä–∏–º—É—î alerts –¥–ª—è –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ + –º.–ö–∏—ó–≤,
    –ø–æ—Ä—ñ–≤–Ω—é—î –∑ cache.last_alerts (–∫–ª—é—á = location_title), —ñ —Ä–æ–∑—Å–∏–ª–∞—î:
      - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—è–≤—É —Ç—Ä–∏–≤–æ–≥–∏ –≤ —Ä–∞–π–æ–Ω—ñ (–∑ —Ñ–æ—Ç–æ Alarm.jpg)
      - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–±—ñ–π —É —Ä–∞–π–æ–Ω—ñ
      - —è–∫—â–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∏–ª–æ—Å—å 0 —Ä–∞–π–æ–Ω—ñ–≤ ‚Äî –∑–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥–±—ñ–π + —Ñ–æ—Ç–æ Clear.jpg
    """
    tick = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logging.info("‚è± –ú–†–ß –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ @ %s", tick)

    alerts = await fetch_region_alerts()
    # –§–æ—Ä–º—É—î–º–æ new_state: –∫–ª—é—á = location_title (–ª—é–¥—Å—å–∫–∞ –Ω–∞–∑–≤–∞), value = alert_type
    new_state: Dict[str, str] = {}
    for a in alerts:
        title = a.get("location_title") or a.get("location_oblast") or "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω"
        new_state[title] = a.get("alert_type", "unknown")

    logging.debug("–ú–†–ß new_state keys: %s", list(new_state.keys()))
    logging.debug("–ú–†–ß last_alerts keys: %s", list(cache.last_alerts.keys()))

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (–ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫) ‚Äî –Ω–µ —à–ª–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not cache.initialized:
        cache.last_alerts = new_state
        cache.initialized = True
        logging.info("–ú–†–ß —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (–±–µ–∑ —Å–ø–æ–≤—ñ—â–µ–Ω—å).")
        return

    chat_id = get_chat_id(app)
    # –Ø–∫—â–æ —á–∞—Ç –Ω–µ –∑–∞–¥–∞–Ω–∏–π ‚Äî –ª–æ–≥—É–≤–∞–Ω–Ω—è —ñ –ø—Ä–æ–ø—É—Å–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    if chat_id is None:
        logging.info("–ú–†–ß: CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")
        cache.last_alerts = new_state
        return

    # –í–∏—è–≤–ª—è—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—ñ —ñ –∫—ñ–Ω—Ü–µ–≤—ñ —Ä–∞–π–æ–Ω–∏
    started = []
    ended = []

    # –ù–æ–≤—ñ –∞–±–æ –∑–º—ñ–Ω–µ–Ω—ñ (—è–∫—â–æ —Ç–∏–ø —Ç—Ä–∏–≤–æ–≥–∏ –∑–º—ñ–Ω–∏–≤—Å—è)
    for r, t in new_state.items():
        old_t = cache.last_alerts.get(r)
        if old_t != t:
            # —è–∫—â–æ —Ä–∞–Ω—ñ—à–µ –Ω–µ –±—É–ª–æ ‚Äî —Ü–µ —Å—Ç–∞—Ä—Ç; —è–∫—â–æ –±—É–≤ —ñ–Ω—à–∏–π —Ç–∏–ø ‚Äî —Ç–µ–∂ –≤–≤–∞–∂–∞—î–º–æ —è–∫ "–æ–Ω–æ–≤–ª–µ–Ω–Ω—è"
            if old_t is None:
                started.append((r, ALERT_TYPES_UA.get(t, t)))
            else:
                # –∑–º—ñ–Ω–∞ —Ç–∏–ø—É —Ç–µ–∂ –≤–ø–∏—Å—É—î–º–æ —è–∫ "–æ–Ω–æ–≤–ª–µ–Ω–Ω—è" (–≤–≤–∞–∂–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è)
                started.append((r, ALERT_TYPES_UA.get(t, t)))

    # –í—ñ–¥–±–æ—ó ‚Äî —Ä–∞–π–æ–Ω–∏, —â–æ –±—É–ª–∏ —É last_alerts, –∞ –≤ new_state —ó—Ö –Ω–µ–º–∞—î
    for r in list(cache.last_alerts.keys()):
        if r not in new_state:
            ended.append(r)

    # –Ø–∫—â–æ —î –∑–∞–ø—É—Å–∫–∏ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É Alarm (–æ–¥–∏–Ω —Ä–∞–∑) —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if started:
        await send_photo_safe(app.bot, chat_id, "images/Alarm.jpg")

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–≤–µ–¥–µ–Ω–Ω—è: –ø–µ—Ä—à—ñ —Å—Ç–∞—Ä—Ç–∏, –ø–æ—Ç—ñ–º –≤—ñ–¥–±–æ—ó
    messages = []
    if started:
        messages.append("üö® *–ù–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:*")
        for r, text in started:
            messages.append(f"‚Ä¢ *{r}* ‚Äî {text}")
    if ended:
        if messages:
            messages.append("")  # —Ä—è–¥–æ–∫ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
        messages.append("‚úÖ *–í—ñ–¥–±—ñ–π —É —Ä–∞–π–æ–Ω–∞—Ö:*")
        for r in ended:
            messages.append(f"‚Ä¢ {r}")

    if messages:
        try:
            await app.bot.send_message(chat_id=chat_id, text="\n".join(messages), parse_mode="Markdown")
        except Exception as e:
            logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ú–†–ß: %s", e)

    # –Ø–∫—â–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ù–ï–ú–ê–Ñ –∂–æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–π–æ–Ω—É ‚Äî –∑–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥–±—ñ–π –ø–æ –æ–±–ª–∞—Å—Ç—ñ + –∫–∞—Ä—Ç–∏–Ω–∫–∞
    if cache.last_alerts and not new_state:
        try:
            await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")
            await send_photo_safe(app.bot, chat_id, "images/Clear.jpg")
        except Exception as e:
            logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–±–æ—é: %s", e)

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
    cache.last_alerts = new_state

# ================== –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏: –∑—É–ø–∏–Ω–∫–∞ ==================
async def stopbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await update.message.reply_text("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏. –í–∏–∫–æ–Ω—É—é –≤–∏–º–∫–Ω–µ–Ω–Ω—è...")
    asyncio.create_task(_shutdown_sequence(context.application))

async def _shutdown_sequence(app):
    logging.info("üîª Shutdown requested by admin")
    try:
        app.job_queue.stop()
    except Exception:
        pass
    try:
        await app.shutdown()
    except Exception:
        pass
    try:
        await app.stop()
    except Exception:
        pass
    logging.info("‚öôÔ∏è –ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ó—É–ø–∏–Ω—è—é event loop.")
    loop = asyncio.get_event_loop()
    loop.stop()

# ================== –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª ==================
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ chat_id, —è–∫—â–æ –∑–∞–¥–∞–Ω–∏–π —É ENV
    if DEFAULT_CHAT_ID:
        app.bot_data["chat_id"] = DEFAULT_CHAT_ID
        app.bot_data["default_chat_id"] = DEFAULT_CHAT_ID

    cache = RegionAlertCache()
    app.bot_data["alert_cache"] = cache

    # ================== –•–µ–Ω–¥–ª–µ—Ä–∏ ==================
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("stopbot", stopbot))

    # –†—É—á–Ω—ñ —Ç–µ–∫—Å—Ç-–∑–∞–ø–∏—Ç–∏ (–∂–æ—Ä—Å—Ç–∫—ñ)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –ª—É–≥–∞–Ω"), lugansk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"), chernihiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å—ñ"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫—É"), frankivsk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_manual_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), lambda u, c: asyncio.create_task(oblast_manual_handler(u, c))))

    # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ (–±–∞–∑–æ–≤–∞)
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logging.error("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —É —Ö–µ–Ω–¥–ª–µ—Ä—ñ:", exc_info=context.error)
        if update and hasattr(update, "message") and update.message:
            try:
                await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            except Exception:
                pass

    app.add_error_handler(error_handler)

    # ================== –ú–†–ß JobQueue ==================
    async def _job(context: ContextTypes.DEFAULT_TYPE):
        await process_alerts(context.application, cache)

    app.job_queue.run_repeating(_job, interval=POLL_INTERVAL, first=0)

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ ‚Äî –ú–†–ß: –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å + –º. –ö–∏—ó–≤")
    await app.run_polling(close_loop=False)

# –Ω–µ–≤–µ–ª–∏–∫–∞ –æ–±–≥–æ—Ä—Ç–∫–∞: —Ä—É—á–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è "—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ" (–ø–æ–∫–∞–∑—É—î —Ç–æ—á–Ω—ñ alert –¥–ª—è –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ –ø–æ –∑–∞–ø–∏—Ç—É)
async def oblast_manual_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    alerts = await fetch_location_alerts("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
    await show_alerts_for_update(update, context, alerts, "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—ñ")

# ================== –°—Ç–∞—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–∏ ==================
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.create_task(main())
        loop.run_forever()
    except KeyboardInterrupt:
        logging.info("üõë –ó—É–ø–∏–Ω–∫–∞ –≤—Ä—É—á–Ω—É (KeyboardInterrupt)")
    finally:
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()
        try:
            loop.run_until_complete(asyncio.gather(*tasks, return_exceptions=True))
        except Exception:
            pass
        loop.close()
        logging.info("Loop closed. Exit.")
