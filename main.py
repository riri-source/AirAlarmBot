import os
import asyncio
import json
import logging
import nest_asyncio
from dataclasses import dataclass, field
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime
from typing import Dict, Optional
import aiohttp
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# ======================================================
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHAT_ID_ENV = os.getenv("CHAT_ID")
DEFAULT_CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None
API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

if not BOT_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –∞–±–æ ALERTS_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ")

# ======================================================
# üîπ –õ–æ–∫–∞–ª—å–Ω–∏–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck
# ======================================================
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω—ñ –∫–ª–∞—Å–∏ —Ç–∞ —Ö–µ–ª–ø–µ—Ä–∏
# ======================================================
@dataclass
class RegionAlertCache:
    last_alerts: Dict[str, str] = field(default_factory=dict)
    initialized: bool = False

ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

def get_chat_id(app) -> Optional[int]:
    return app.bot_data.get("chat_id") or app.bot_data.get("default_chat_id")

async def send_photo_safe(bot, chat_id: Optional[int], image_path: str):
    if not chat_id:
        return
    try:
        with open(image_path, "rb") as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except Exception:
        pass

async def _get_api_data():
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL, headers=headers, timeout=10) as resp:
            return await resp.json()

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞
# ======================================================
def load_locations_dict() -> Dict:
    path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "locations_dict.json")
    if not os.path.exists(path):
        return {}
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ª–æ–≤–Ω–∏–∫–∞: {e}")
        return {}

def save_locations_dict(data: Dict):
    path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "locations_dict.json")
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ======================================================
# üîπ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ö–∏—ó–≤—â–∏–Ω–∏
# ======================================================
async def process_alerts(app, cache: RegionAlertCache):
    data = await _get_api_data()
    alerts = data.get("alerts", [])
    relevant = [a for a in alerts if a.get("location_oblast") in {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤"}]
    new_state = {a["location_title"]: a["alert_type"] for a in relevant}
    chat_id = get_chat_id(app)

    if not cache.initialized:
        cache.last_alerts = new_state
        cache.initialized = True
        return

    # –Ω–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏
    for raion, alert_type in new_state.items():
        if cache.last_alerts.get(raion) != alert_type and chat_id:
            await send_photo_safe(app.bot, chat_id, "images/Alarm.jpg")
            await app.bot.send_message(chat_id=chat_id,
                text=f"üö® *{raion}* ‚Äî *{ALERT_TYPES_UA.get(alert_type, alert_type)}*",
                parse_mode="Markdown")

    # –≤—ñ–¥–±–æ—ó
    for raion in list(cache.last_alerts.keys()):
        if raion not in new_state and chat_id:
            await app.bot.send_message(chat_id=chat_id,
                text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É *{raion}*", parse_mode="Markdown")

    # –∑–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥–±—ñ–π
    if cache.last_alerts and not new_state and chat_id:
        await app.bot.send_message(chat_id=chat_id,
            text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}")
        await send_photo_safe(app.bot, chat_id, "images/Clear.jpg")

    cache.last_alerts = new_state

# ======================================================
# üîπ –†—É—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö / –º—ñ—Å—Ç–∞—Ö
# ======================================================
async def region_status(keyword: str) -> bool:
    data = await _get_api_data()
    kw = keyword.lower()
    for a in data.get("alerts", []):
        if a.get("finished_at") is None:
            if kw in (a.get("location_oblast") or "").lower() or kw in (a.get("location_title") or "").lower():
                return True
    return False

async def krym_alerts(update, ctx): await _region_reply(update, "–∫—Ä–∏–º", "–£ –ö—Ä–∏–º—É")
async def odesa_alerts(update, ctx): await _region_reply(update, "–æ–¥–µ—Å", "–í –û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")
async def oblast_alerts(update, ctx): await _region_reply(update, "–∫–∏—ó–≤—Å—å–∫–∞", "–£ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")
async def kyiv_alerts(update, ctx): await _region_reply(update, "–∫–∏—ó–≤", "–£ –ö–∏—î–≤—ñ")
async def lugansk_alerts(update, ctx): await _region_reply(update, "–ª—É–≥–∞–Ω", "–£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")
async def chernihiv_alerts(update, ctx): await _region_reply(update, "—á–µ—Ä–Ω—ñ–≥", "–£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")
async def frankivsk_alerts(update, ctx): await _region_reply(update, "—Ñ—Ä–∞–Ω–∫", "–í –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")

async def _region_reply(update, keyword, label):
    if await region_status(keyword):
        await update.message.reply_text(f"üö® {label} —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text(f"‚úÖ {label} –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

# ======================================================
# üîπ –•–µ–Ω–¥–ª–µ—Ä —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
# ======================================================
async def handle_dynamic_query(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").lower().strip()
    if any(x in text for x in [
        "—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ","—â–æ –ø–æ –∫–∏—î–≤—É","—è–∫ —Ç–∞–º –∫—Ä–∏–º","—â–æ –ø–æ –æ–¥–µ—Å",
        "—â–æ –ø–æ –ª—É–≥–∞–Ω","—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫","—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"
    ]): return

    keyword = text.replace("—â–æ –ø–æ", "").replace("?", "").strip().lower()
    locations = ctx.application.bot_data.get("locations_dict", {})

    found_region = None
    for oblast, places in locations.items():
        if keyword in places.keys():
            found_region = oblast
            break

    if not found_region:
        await update.message.reply_text(
            "ü§î –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É? (—Ç–∞–∫/–Ω—ñ)"
        )
        ctx.application.bot_data["pending_add"] = keyword
        ctx.application.bot_data["pending_user"] = update.effective_user.id
        return

    cache: RegionAlertCache = ctx.application.bot_data.get("alert_cache", RegionAlertCache())
    active_alerts = cache.last_alerts or {}
    region_active = any(found_region in a for a in active_alerts.keys())

    if region_active:
        await update.message.reply_text(f"üö® –í –æ–±–ª–∞—Å—Ç—ñ *{found_region}* —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!", parse_mode="Markdown")
    else:
        await update.message.reply_text(f"‚úÖ –í –æ–±–ª–∞—Å—Ç—ñ *{found_region}* –≤—Å–µ —Ç–∏—Ö–æ!", parse_mode="Markdown")

# ======================================================
# üîπ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É
# ======================================================
async def handle_admin_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = ctx.application.bot_data
    if user_id != ADMIN_ID and data.get("pending_add"):
        if update.message.text.lower().startswith("—Ç–∞–∫"):
            keyword = data.pop("pending_add")
            await ctx.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üì¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ–ø–æ–Ω—É—î –¥–æ–¥–∞—Ç–∏: *{keyword}*\n\n"
                     f"–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ–±–ª–∞—Å—Ç—ñ, –∫—É–¥–∏ –¥–æ–¥–∞—Ç–∏.\n" +
                     "\n".join([f"{i+1}. {r}" for i, r in enumerate(data['locations_dict'].keys())]),
                parse_mode="Markdown")
        else:
            await update.message.reply_text("üëå –î–æ–±—Ä–µ, –Ω–µ –¥–æ–¥–∞—î–º–æ.")
        data.pop("pending_user", None)
        return

    # —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Ç–µ–±–µ ‚Äî –≤–∏–±—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ/—Ä–∞–π–æ–Ω—É
    if user_id == ADMIN_ID and data.get("pending_add"):
        keyword = data.pop("pending_add")
        locations = data["locations_dict"]
        text = update.message.text.strip()
        if text.isdigit():
            idx = int(text) - 1
            oblasts = list(locations.keys())
            if 0 <= idx < len(oblasts):
                region = oblasts[idx]
                # —è–∫—â–æ –ö–∏—ó–≤—Å—å–∫–∞ ‚Äî —É—Ç–æ—á–Ω–µ–Ω–Ω—è —Ä–∞–π–æ–Ω—É
                if region == "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":
                    await ctx.bot.send_message(chat_id=ADMIN_ID,
                        text="–í–∏–±–µ—Ä–∏ —Ä–∞–π–æ–Ω:\n1. –ë—É—á–∞–Ω—Å—å–∫–∏–π\n2. –í–∏—à–≥–æ—Ä–æ–¥—Å—å–∫–∏–π\n3. –§–∞—Å—Ç—ñ–≤—Å—å–∫–∏–π\n"
                             "4. –û–±—É—Ö—ñ–≤—Å—å–∫–∏–π\n5. –ë—ñ–ª–æ—Ü–µ—Ä–∫—ñ–≤—Å—å–∫–∏–π\n6. –ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∏–π\n7. –ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π")
                    data["pending_region_choice"] = (keyword, region)
                    return
                locations[region][keyword] = region
                save_locations_dict(locations)
                await ctx.bot.send_message(chat_id=ADMIN_ID, text=f"‚úÖ –î–æ–¥–∞–Ω–æ *{keyword}* ‚Üí {region}", parse_mode="Markdown")
                data["locations_dict"] = locations
                return
        elif data.get("pending_region_choice"):
            keyword, region = data.pop("pending_region_choice")
            mapping = {
                "1":"–ë—É—á–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω","2":"–í–∏—à–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω","3":"–§–∞—Å—Ç—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
                "4":"–û–±—É—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω","5":"–ë—ñ–ª–æ—Ü–µ—Ä–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
                "6":"–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∏–π —Ä–∞–π–æ–Ω","7":"–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω"
            }
            if text in mapping:
                locations["–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"][keyword] = mapping[text]
                save_locations_dict(locations)
                await ctx.bot.send_message(chat_id=ADMIN_ID,
                    text=f"‚úÖ –î–æ–¥–∞–Ω–æ *{keyword}* ‚Üí {mapping[text]}", parse_mode="Markdown")
                data["locations_dict"] = locations

# ======================================================
# üîπ –ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
# ======================================================
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.application.bot_data["chat_id"] = update.effective_chat.id
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç üå∏ –ë–æ—Ç –ø—Ä–∞—Ü—é—î.\n–û—Ç—Ä–∏–º—É—é –ø–æ—Ç–æ—á–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏...")

    data = await _get_api_data()
    alerts = data.get("alerts", [])
    if not alerts:
        await ctx.bot.send_message(chat_id=ADMIN_ID, text="‚úÖ –ó–∞—Ä–∞–∑ –≤ –£–∫—Ä–∞—ó–Ω—ñ –≤—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ.")
    else:
        lines = [f"üö® {a['location_oblast']} ‚Äî {a['location_title']}: {ALERT_TYPES_UA.get(a['alert_type'],'')}" for a in alerts]
        await ctx.bot.send_message(chat_id=ADMIN_ID, text="üó∫ –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:\n" + "\n".join(lines))

async def stopbot(update, ctx):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await update.message.reply_text("üõë –ó—É–ø–∏–Ω—è—é —Ä–æ–±–æ—Ç—É...")
    asyncio.create_task(_shutdown_sequence(ctx.application))

async def _shutdown_sequence(app):
    try:
        app.job_queue.stop()
        await app.shutdown()
        await app.stop()
    except Exception:
        pass
    asyncio.get_event_loop().stop()

async def list_regions(update, ctx):
    await update.message.reply_text("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π...")
    data = await _get_api_data()
    regions = sorted(set(a["location_oblast"] for a in data.get("alerts", []) if a.get("location_oblast")))
    if regions:
        await update.message.reply_text("üß≠ –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π, —è–∫—ñ –±–∞—á–∏—Ç—å API:\n\n" + "\n".join([f"‚Ä¢ {r}" for r in regions]))
    else:
        await update.message.reply_text("‚ùå API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–æ —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π.")

async def export_dict(update, ctx):
    if update.effective_user.id != ADMIN_ID:
        return
    locations = ctx.application.bot_data.get("locations_dict", {})
    text = json.dumps(locations, ensure_ascii=False, indent=2)
    await ctx.bot.send_message(chat_id=ADMIN_ID, text=f"üìÑ –ê–∫—Ç—É–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫:\n\n<pre>{text}</pre>", parse_mode="HTML")

async def error_handler(update, ctx):
    logging.error("–ü–æ–º–∏–ª–∫–∞:", exc_info=ctx.error)

# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# ======================================================
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    if DEFAULT_CHAT_ID:
        app.bot_data["chat_id"] = DEFAULT_CHAT_ID
        app.bot_data["default_chat_id"] = DEFAULT_CHAT_ID

    cache = RegionAlertCache()
    app.bot_data["alert_cache"] = cache
    app.bot_data["locations_dict"] = load_locations_dict()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stopbot", stopbot))
    app.add_handler(CommandHandler("list_regions", list_regions))
    app.add_handler(CommandHandler("export_dict", export_dict))

    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –ª—É–≥–∞–Ω"), lugansk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"), chernihiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫|—ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫"), frankivsk_alerts))

    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^—â–æ –ø–æ "), handle_dynamic_query))
    app.add_handler(MessageHandler(filters.TEXT, handle_admin_reply))
    app.add_error_handler(error_handler)

    async def _poll(ctx: ContextTypes.DEFAULT_TYPE):
        await process_alerts(ctx.application, cache)

    app.job_queue.run_repeating(_poll, interval=POLL_INTERVAL, first=0)
    await app.run_polling(close_loop=False)

# ======================================================
# üîπ –ó–∞–ø—É—Å–∫
# ======================================================
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
