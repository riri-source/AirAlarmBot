import os
import asyncio
import logging
import json
import nest_asyncio
from dataclasses import dataclass, field
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from typing import Dict, Optional
from datetime import datetime
import aiohttp
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# ======================================================
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHAT_ID_ENV = os.getenv("CHAT_ID")
DEFAULT_CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None
API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

if not BOT_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ BOT_TOKEN –∞–±–æ ALERTS_TOKEN")

# ======================================================
# üîπ –õ–æ–∫–∞–ª—å–Ω–∏–π HTTP —Å–µ—Ä–≤–µ—Ä (healthcheck)
# ======================================================
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ======================================================
# üîπ –ö–ª–∞—Å–∏ —Ç–∞ —Ö–µ–ª–ø–µ—Ä–∏
# ======================================================
@dataclass
class RegionAlertCache:
    last_alerts: Dict[str, str] = field(default_factory=dict)
    initialized: bool = False

ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

def get_chat_id(app) -> Optional[int]:
    chat_id = app.bot_data.get("chat_id")
    if chat_id:
        return int(chat_id)
    default_chat = app.bot_data.get("default_chat_id")
    return int(default_chat) if default_chat else None

async def send_photo_safe(bot, chat_id: Optional[int], image_path: str):
    if not chat_id:
        return
    try:
        with open(image_path, "rb") as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except Exception:
        pass

async def _get_api_data():
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL, headers=headers, timeout=10) as resp:
            return await resp.json()

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
# ======================================================
def load_locations_dict(file_path: str = None) -> Dict:
    if file_path is None:
        base_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(base_dir, "locations_dict.json")

    if not os.path.exists(file_path):
        logging.warning("‚ö†Ô∏è –§–∞–π–ª —Å–ª–æ–≤–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é –ø–æ—Ä–æ–∂–Ω—ñ–π —à–∞–±–ª–æ–Ω.")
        return {}
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        logging.info(f"üìò –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–ª–æ–≤–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤: {len(data.get('–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', {}))} –ø—É–Ω–∫—Ç—ñ–≤.")
        return data
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∞: {e}")
        return {}

# ======================================================
# üîπ –ú–†–ß ‚Äî –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ + –¢–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É
# ======================================================
async def process_alerts(app, cache: RegionAlertCache):
    data = await _get_api_data()
    alerts = data.get("alerts", [])
    relevant = [
        a for a in alerts
        if a.get("location_oblast") in {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤", "–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–≥—ñ–æ–Ω"}
    ]
    new_state = {a["location_title"]: a["alert_type"] for a in relevant}
    chat_id = get_chat_id(app)
    admin_chat = int(ADMIN_ID)
    logging.info(f"‚è± –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å @ {datetime.now().strftime('%H:%M:%S')}")

    if not cache.initialized:
        cache.last_alerts = new_state
        cache.initialized = True
        return

    for raion, alert_type in new_state.items():
        oblast = next((a.get("location_oblast") for a in alerts if a.get("location_title") == raion), "")
        is_test_region = "—Ç–µ—Å—Ç–æ–≤" in oblast.lower()
        target_chat = admin_chat if is_test_region else chat_id
        prefix = "üß™ [–¢–ï–°–¢]" if is_test_region else "üö®"

        if cache.last_alerts.get(raion) != alert_type and target_chat:
            await send_photo_safe(app.bot, target_chat, "images/Alarm.jpg")
            await app.bot.send_message(
                chat_id=target_chat,
                text=f"{prefix} *{raion}* ‚Äî *{ALERT_TYPES_UA.get(alert_type, alert_type)}*",
                parse_mode="Markdown",
            )

    # –í—ñ–¥–±–æ—ó
    for raion in list(cache.last_alerts.keys()):
        if raion not in new_state:
            oblast = next((a.get("location_oblast") for a in alerts if a.get("location_title") == raion), "")
            is_test_region = "—Ç–µ—Å—Ç–æ–≤" in oblast.lower()
            target_chat = admin_chat if is_test_region else chat_id
            prefix = "üß™ [–¢–ï–°–¢]" if is_test_region else "‚úÖ"
            if target_chat:
                await app.bot.send_message(
                    chat_id=target_chat,
                    text=f"{prefix} –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É *{raion}*",
                    parse_mode="Markdown",
                )

    if cache.last_alerts and not new_state and chat_id:
        await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}")
        await send_photo_safe(app.bot, chat_id, "images/Clear.jpg")

    cache.last_alerts = new_state

# ======================================================
# üîπ –†—É—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö / –º—ñ—Å—Ç–∞—Ö
# ======================================================
async def region_status(keyword: str) -> bool:
    data = await _get_api_data()
    kw = keyword.lower()
    for a in data.get("alerts", []):
        if a.get("finished_at") is None:
            oblast = (a.get("location_oblast") or "").lower()
            title = (a.get("location_title") or "").lower()
            if kw in oblast or kw in title:
                return True
    return False

async def krym_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await region_status("–∫—Ä–∏–º")
    if active:
        await update.message.reply_text("üö® –£ –ö—Ä–∏–º—É —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text("‚úÖ –£ –ö—Ä–∏–º—É –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def odesa_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await region_status("–æ–¥–µ—Å")
    if active:
        await update.message.reply_text("üö® –í –û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text("‚úÖ –í –û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def oblast_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await region_status("–∫–∏—ó–≤—Å—å–∫–∞")
    if active:
        await update.message.reply_text("üö® –£ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text("‚úÖ –£ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def kyiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await region_status("–∫–∏—ó–≤")
    if active:
        await update.message.reply_text("üö® –£ –ö–∏—î–≤—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text("‚úÖ –£ –ö–∏—î–≤—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def lugansk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await region_status("–ª—É–≥–∞–Ω")
    if active:
        await update.message.reply_text("üö® –£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text("‚úÖ –£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def chernihiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await region_status("—á–µ—Ä–Ω—ñ–≥")
    if active:
        await update.message.reply_text("üö® –£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text("‚úÖ –£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def frankivsk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await region_status("—Ñ—Ä–∞–Ω–∫")
    if active:
        await update.message.reply_text("üö® –í –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text("‚úÖ –í –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

# ======================================================
# üîπ –•–µ–Ω–¥–ª–µ—Ä —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
# ======================================================
async def handle_dynamic_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").lower().strip()
    if any(x in text for x in ["—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ", "—â–æ –ø–æ –∫–∏—î–≤—É", "—â–æ –ø–æ –∫—Ä–∏–º", "—â–æ –ø–æ –æ–¥–µ—Å", "—â–æ –ø–æ –ª—É–≥–∞–Ω", "—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫", "—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"]):
        return

    locations = context.application.bot_data.get("locations_dict", {}).get("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", {})
    keyword = text.replace("—â–æ –ø–æ", "").replace("?", "").strip().lower()

    region = None
    for key, val in locations.items():
        if keyword == key.lower() or keyword in key.lower():
            region = val
            break

    if not region:
        await update.message.reply_text("ü§î –Ø —â–µ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É. –ô–æ–≥–æ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞.")
        return

    cache: RegionAlertCache = context.application.bot_data.get("alert_cache", RegionAlertCache())
    active_alerts = cache.last_alerts or {}
    if region in active_alerts:
        await update.message.reply_text(f"üö® –£ {region} —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text(f"‚úÖ –£ {region} –∑–∞—Ä–∞–∑ –≤—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ.")

# ======================================================
# üîπ –ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
# ======================================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.application.bot_data["chat_id"] = update.effective_chat.id
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç üå∏\n"
                                    "–Ø –ø–æ–≤—ñ–¥–æ–º–ª—è—é –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏ —É –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ.\n"
                                    "–ú–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏: ¬´—â–æ –ø–æ —ñ—Ä–ø–µ–Ω—é?¬ª –∞–±–æ ¬´—â–æ –ø–æ –±–æ—Ä–∏—Å–ø–æ–ª—é?¬ª")

async def stopbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await update.message.reply_text("üõë –ó—É–ø–∏–Ω—è—é —Ä–æ–±–æ—Ç—É...")
    asyncio.create_task(_shutdown_sequence(context.application))

async def _shutdown_sequence(app):
    try:
        app.job_queue.stop()
        await app.shutdown()
        await app.stop()
    except Exception:
        pass
    asyncio.get_event_loop().stop()

async def error_handler(update, context):
    logging.error("–ü–æ–º–∏–ª–∫–∞:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")

# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# ======================================================
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    if DEFAULT_CHAT_ID:
        app.bot_data["chat_id"] = DEFAULT_CHAT_ID
        app.bot_data["default_chat_id"] = DEFAULT_CHAT_ID

    cache = RegionAlertCache()
    app.bot_data["alert_cache"] = cache

    locations_dict = load_locations_dict()
    app.bot_data["locations_dict"] = locations_dict

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stopbot", stopbot))

    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫—É|—â–æ –ø–æ —ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—É|—â–æ –ø–æ —Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—É"), frankivsk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –ª—É–≥–∞–Ω"), lugansk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"), chernihiv_alerts))

    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^—â–æ –ø–æ "), handle_dynamic_query))
    app.add_error_handler(error_handler)

    async def _poll(context: ContextTypes.DEFAULT_TYPE):
        await process_alerts(context.application, cache)

    app.job_queue.run_repeating(_poll, interval=POLL_INTERVAL, first=0)
    app.job_queue.start()

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –π –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
    await app.run_polling(close_loop=False)

# ======================================================
# üîπ –ó–∞–ø—É—Å–∫
# ======================================================
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.create_task(main())
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        for task in asyncio.all_tasks():
            task.cancel()
        loop.close()
        logging.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
