import os
import asyncio
import nest_asyncio
import logging
import aiohttp
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ===== –§–µ–π–∫–æ–≤–∏–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render =====
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(('0.0.0.0', port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(level=logging.INFO)

# ===== –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è =====
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))

if not TELEGRAM_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ –æ–¥–Ω—É –∞–±–æ –∫—ñ–ª—å–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è: BOT_TOKEN, ALERTS_TOKEN")

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

# ===== –°–ª–æ–≤–Ω–∏–∫ —Ç–∏–ø—ñ–≤ —Ç—Ä–∏–≤–æ–≥ =====
ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

# ===== –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è chat_id =====
CHAT_ID_FILE = "chat_id.txt"
CHAT_ID = None

def get_saved_chat_id():
    global CHAT_ID
    if os.path.exists(CHAT_ID_FILE):
        try:
            CHAT_ID = int(open(CHAT_ID_FILE).read().strip())
        except:
            CHAT_ID = None

async def register_chat_id(update: Update):
    global CHAT_ID
    chat_id = update.effective_chat.id
    if CHAT_ID is None:
        CHAT_ID = chat_id
        with open(CHAT_ID_FILE, "w") as f:
            f.write(str(CHAT_ID))
        logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ chat_id –≥—Ä—É–ø–∏: {CHAT_ID}")
        await update.message.reply_text("‚úÖ Chat_id –≥—Ä—É–ø–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, —Ç–µ–ø–µ—Ä —Ç—Ä–∏–≤–æ–≥–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ —Å—é–¥–∏.")

# ===== –•–µ–Ω–¥–ª–µ—Ä–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await register_chat_id(update)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç üå∏\n–ù–∞–ø–∏—à–∏ ¬´–©–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ¬ª —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å, –¥–µ –∑–∞—Ä–∞–∑ —Ç—Ä–∏–≤–æ–≥–∞ —É {REGION}."
    )

async def oblast_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await register_chat_id(update)
    await send_region_alerts(update, REGION)

async def kyiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await register_chat_id(update)
    await send_city_alerts(update, "–º. –ö–∏—ó–≤")

async def krym_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await register_chat_id(update)
    await send_region_alerts(update, "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º")

async def odesa_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await register_chat_id(update)
    await send_city_alerts(update, "–º. –û–¥–µ—Å–∞")

async def frankivsk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await register_chat_id(update)
    await send_city_alerts(update, "–º. –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫")

# ===== –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è =====
async def fetch_alerts():
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL, headers=headers, timeout=10) as resp:
            return await resp.json()

async def send_region_alerts(update, region_name):
    data = await fetch_alerts()
    region_alerts = [a for a in data.get("alerts", []) if a.get("location_oblast") == region_name]

    if not region_alerts:
        try:
            with open("images/Saefty.jpg", "rb") as photo:
                await update.message.reply_photo(photo=photo)
            await update.message.reply_text(f"‚úÖ {region_name} –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ!")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
        return

    text = f"üö® *–ê–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —É {region_name}:*\n"
    for alert in region_alerts:
        raion = alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω")
        alert_type = alert.get("alert_type", "–Ω–µ–≤—ñ–¥–æ–º–æ")
        alert_type_ua = ALERT_TYPES_UA.get(alert_type, alert_type)
        text += f"‚Ä¢ {raion} ‚Äî {alert_type_ua}\n"

    await update.message.reply_text(text, parse_mode="Markdown")

async def send_city_alerts(update, city_name):
    data = await fetch_alerts()
    city_alerts = [a for a in data.get("alerts", []) if a.get("location_oblast") == city_name or a.get("location_title") == city_name]

    if not city_alerts:
        try:
            with open("images/Saefty.jpg", "rb") as photo:
                await update.message.reply_photo(photo=photo)
            await update.message.reply_text(f"‚úÖ –£ {city_name} –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ!")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
        return

    text = f"üö® *–¢—Ä–∏–≤–æ–≥–∞ —É {city_name}:*\n"
    for alert in city_alerts:
        raion = alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω")
        alert_type = alert.get("alert_type", "–Ω–µ–≤—ñ–¥–æ–º–æ")
        alert_type_ua = ALERT_TYPES_UA.get(alert_type, alert_type)
        text += f"‚Ä¢ {raion} ‚Äî {alert_type_ua}\n"

    await update.message.reply_text(text, parse_mode="Markdown")

# ===== –§–æ–Ω–æ–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è API –ø–æ —Ä–∞–π–æ–Ω–∞—Ö/–º—ñ—Å—Ç–∞—Ö =====
last_alerts_state = {}  # {location: set(alert_type)}

async def poll_alerts(app):
    global last_alerts_state
    while True:
        try:
            data = await fetch_alerts()
            region_alerts = [a for a in data.get("alerts", []) if a.get("location_oblast") == REGION]

            # –ú–∞–ø–∏–º–æ —Ç—Ä–∏–≤–æ–≥–∏ –ø–æ —Ä–∞–π–æ–Ω–∞—Ö
            current_state = {}
            for alert in region_alerts:
                loc = alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω")
                atype = alert.get("alert_type", "–Ω–µ–≤—ñ–¥–æ–º–æ")
                current_state.setdefault(loc, set()).add(atype)

            # ===== –í–∏—è–≤–ª—è—î–º–æ –Ω–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏ =====
            for loc, types in current_state.items():
                if loc not in last_alerts_state or types != last_alerts_state.get(loc, set()):
                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ—Å—Ç —Ç—Ä–∏–≤–æ–≥–∏
                    try:
                        with open("images/Alarm.jpg", "rb") as photo:
                            await app.bot.send_photo(chat_id=CHAT_ID, photo=photo)
                        text = f"üö® *–¢—Ä–∏–≤–æ–≥–∞ —É {loc}:*\n"
                        for t in types:
                            text += f"‚Ä¢ {ALERT_TYPES_UA.get(t,t)}\n"
                        await app.bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="Markdown")
                    except Exception as e:
                        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç—Ä–∏–≤–æ–≥–∏: {e}")

            # ===== –í–∏—è–≤–ª—è—î–º–æ –≤—ñ–¥–±–æ—ó =====
            for loc, types in last_alerts_state.items():
                if loc not in current_state or current_state[loc] != types:
                    try:
                        with open("images/Clear.jpg", "rb") as photo:
                            await app.bot.send_photo(chat_id=CHAT_ID, photo=photo)
                        await app.bot.send_message(chat_id=CHAT_ID,
                                                   text=f"üíö –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {loc}")
                    except Exception as e:
                        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–±–æ—é: {e}")

            last_alerts_state = current_state

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ API: {e}")

        await asyncio.sleep(POLL_INTERVAL)

# ===== Keep-alive –¥–ª—è Render =====
async def keep_alive(port: int):
    url = f"http://localhost:{port}"
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    logging.info(f"Keep-alive ping –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å: {resp.status}")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ keep-alive ping: {e}")
        await asyncio.sleep(45)

# ===== –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Telegram =====
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error(msg="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —É —Ö–µ–Ω–¥–ª–µ—Ä—ñ:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# ===== –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª =====
async def main():
    global CHAT_ID
    nest_asyncio.apply()
    get_saved_chat_id()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å—ñ"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫—É"), frankivsk_alerts))

    # –ë—É–¥–µ–º–æ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ chat_id –Ω–∞ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    app.add_handler(MessageHandler(filters.ALL, register_chat_id))

    app.add_error_handler(error_handler)

    asyncio.create_task(poll_alerts(app))
    asyncio.create_task(keep_alive(int(os.environ.get("PORT", 10000))))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await app.run_polling()

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
