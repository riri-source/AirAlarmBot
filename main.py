import os
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
import asyncio
import nest_asyncio
import logging
import aiohttp
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ===== –°–ª–æ–≤–Ω–∏—á–æ–∫ —Ç–∏–ø—ñ–≤ —Ç—Ä–∏–≤–æ–≥ =====
ALERT_TYPE_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "artillery_shelling": "–ê—Ä—Ç–∏–ª–µ—Ä—ñ–π—Å—å–∫–∏–π –æ–±—Å—Ç—Ä—ñ–ª!",
    "urban_fights": "–ë–æ—ó –≤ –Ω–∞—Å–µ–ª–µ–Ω–æ–º—É –ø—É–Ω–∫—Ç—ñ!",
    "chemical_threat": "–•—ñ–º—ñ—á–Ω–∞ –Ω–µ–±–µ–∑–ø–µ–∫–∞!",
    "nuclear_threat": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ –Ω–µ–±–µ–∑–ø–µ–∫–∞!",
    "unknown": "–ù–µ–≤—ñ–¥–æ–º–∞ —Ç—Ä–∏–≤–æ–≥–∞!"
}

# ===== –§–µ–π–∫–æ–≤–∏–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render =====
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(('0.0.0.0', port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(level=logging.INFO)

# ===== –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è =====
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
CHAT_ID = int(os.getenv("CHAT_ID", "177475616"))

if not TELEGRAM_TOKEN or not ALERTS_TOKEN or not CHAT_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ –æ–¥–Ω—É –∞–±–æ –∫—ñ–ª—å–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è: BOT_TOKEN, ALERTS_TOKEN, CHAT_ID")

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

# ===== –•–µ–Ω–¥–ª–µ—Ä–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç üå∏\n–ù–∞–ø–∏—à–∏ ¬´–©–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ¬ª —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å, –¥–µ –∑–∞—Ä–∞–∑ —Ç—Ä–∏–≤–æ–≥–∞ —É {REGION}."
    )

async def oblast_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, timeout=10) as resp:
                data = await resp.json()

        region_alerts = [
            alert for alert in data.get("alerts", [])
            if alert.get("location_oblast") == REGION
        ]

        if not region_alerts:
            await update.message.reply_text(f"‚úÖ {REGION} - –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ!")
            with open("images/Saefty.jpg", "rb") as photo:
                await update.message.reply_photo(photo=photo)
            return

        text = f"üö® *–ê–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}:*\n"
        for alert in region_alerts:
            raion = alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω")
            alert_type = ALERT_TYPE_UA.get(alert.get("alert_type", "unknown"), "–ù–µ–≤—ñ–¥–æ–º–∞ —Ç—Ä–∏–≤–æ–≥–∞!")
            text += f"‚Ä¢ {raion} ‚Äî {alert_type}\n"

        await update.message.reply_markdown(text)

    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

# ===== –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç: "–Ø–∫ —Ç–∞–º –ö—Ä–∏–º?" =====
async def krym_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, timeout=10) as resp:
                data = await resp.json()

        krym_alerts = [
            alert for alert in data.get("alerts", [])
            if alert.get("location_oblast") == "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º"
        ]

        if krym_alerts:
            text = "üö® –£ –ö—Ä–∏–º—É –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!\n"
            for alert in krym_alerts:
                raion = alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω")
                alert_type = ALERT_TYPE_UA.get(alert.get("alert_type", "unknown"), "–ù–µ–≤—ñ–¥–æ–º–∞ —Ç—Ä–∏–≤–æ–≥–∞!")
                text += f"‚Ä¢ {raion} ‚Äî {alert_type}\n"
        else:
            text = "‚úÖ –£ –ö—Ä–∏–º—É –∑–∞—Ä–∞–∑ –≤—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ (–Ω–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥)."

        await update.message.reply_text(text)

    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API: {e}")

# ===== –ù–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç: "–©–æ –ø–æ –ö–∏—î–≤—É?" =====
async def kyiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, timeout=10) as resp:
                data = await resp.json()

        kyiv_alerts = [
            alert for alert in data.get("alerts", [])
            if alert.get("location_city") == "–ö–∏—ó–≤"
        ]

        if kyiv_alerts:
            text = "üö® –£ –º.–ö–∏—ó–≤ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!\n"
            for alert in kyiv_alerts:
                raion = alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω")
                alert_type = ALERT_TYPE_UA.get(alert.get("alert_type", "unknown"), "–ù–µ–≤—ñ–¥–æ–º–∞ —Ç—Ä–∏–≤–æ–≥–∞!")
                text += f"‚Ä¢ {raion} ‚Äî {alert_type}\n"
        else:
            text = "‚úÖ –£ –º.–ö–∏—ó–≤ –∑–∞—Ä–∞–∑ –≤—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ (–Ω–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥)."

        await update.message.reply_text(text)

    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API: {e}")

# ===== –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–±–æ—ó–≤ —Ç–∞ —Ç—Ä–∏–≤–æ–≥ =====
async def send_clear_message(app, region):
    caption = f"‚úÖ –í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –≤ {region}!"
    photo_path = "images/Clear.jpg"
    with open(photo_path, "rb") as photo:
        await app.bot.send_photo(chat_id=CHAT_ID, photo=photo, caption=caption)

async def send_alarm_message(app, region, alerts):
    text = f"üö® *–ê–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —É {region}:*\n"
    for alert in alerts:
        raion = alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω")
        alert_type = ALERT_TYPE_UA.get(alert.get("alert_type", "unknown"), "–ù–µ–≤—ñ–¥–æ–º–∞ —Ç—Ä–∏–≤–æ–≥–∞!")
        text += f"‚Ä¢ {raion} ‚Äî {alert_type}\n"

    photo_path = "images/Alarm.jpg"
    with open(photo_path, "rb") as photo:
        await app.bot.send_photo(chat_id=CHAT_ID, photo=photo, caption=text, parse_mode="Markdown")

# ===== –§–æ–Ω–æ–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è API –∑ –≤—ñ–¥–±–æ—î–º —Ç–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ =====
last_alert_active = False

async def poll_alerts(app):
    global last_alert_active
    while True:
        headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(API_URL, headers=headers, timeout=10) as resp:
                    data = await resp.json()

            region_alerts = [
                alert for alert in data.get("alerts", [])
                if alert.get("location_oblast") == REGION
            ]

            if region_alerts and not last_alert_active:
                last_alert_active = True
                await send_alarm_message(app, REGION, region_alerts)

            elif not region_alerts and last_alert_active:
                last_alert_active = False
                await send_clear_message(app, REGION)

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ API: {e}")

        await asyncio.sleep(POLL_INTERVAL)

# ===== –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª =====
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    asyncio.create_task(poll_alerts(app))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await app.run_polling()

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
