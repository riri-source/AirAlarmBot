import os
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
import asyncio
import nest_asyncio
import logging
import aiohttp
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ===== Load .env (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è) =====
load_dotenv()

# ===== –§–µ–π–∫–æ–≤–∏–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render =====
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(level=logging.INFO)

# ===== –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è =====
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))

# CHAT_ID –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–¥–∞–Ω–æ —è–∫ ENV –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—å –ø—ñ—Å–ª—è /start
CHAT_ID_ENV = os.getenv("CHAT_ID")
CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None

# –ê–¥–º—ñ–Ω –¥–ª—è –∞–≤–∞—Ä—ñ–π–Ω–æ—ó –∑—É–ø–∏–Ω–∫–∏
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

if not TELEGRAM_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ –æ–¥–Ω—É –∞–±–æ –∫—ñ–ª—å–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è: BOT_TOKEN, ALERTS_TOKEN")

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

# ===== –°–ª–æ–≤–Ω–∏–∫ —Ç–∏–ø—ñ–≤ —Ç—Ä–∏–≤–æ–≥ (—É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–∞–∑–≤–∏) =====
ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—Ç–∞–Ω—É —Ç–∞ —Ç–∞—Å–∫—ñ–≤ =====
current_region_alerts = {}  # {—Ä–∞–π–æ–Ω: —Ç–∏–ø —Ç—Ä–∏–≤–æ–≥–∏}
alerts_initialized = False


# ===== –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó =====
async def fetch_alerts(location_name, city_type="oblast"):
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, timeout=10) as resp:
                data = await resp.json()
        if city_type == "oblast":
            return [a for a in data.get("alerts", []) if a.get("location_oblast") == location_name]
        else:
            return [
                a
                for a in data.get("alerts", [])
                if a.get("location_title") == location_name or a.get("location_oblast") == location_name
            ]
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API: {e}")
        return []


# ===== –•–µ–Ω–¥–ª–µ—Ä–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CHAT_ID
    CHAT_ID = update.effective_chat.id  # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ chat_id –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó –∫–æ–º–∞–Ω–¥–∏ /start
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç üå∏\n–ù–∞–ø–∏—à–∏ ¬´–©–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ¬ª —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å, –¥–µ –∑–∞—Ä–∞–∑ —Ç—Ä–∏–≤–æ–≥–∞ —É {REGION}."
    )


async def oblast_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    alerts = await fetch_alerts(REGION)
    if not alerts:
        await update.message.reply_text(f"‚úÖ {REGION} - –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ!")
        try:
            with open("images/Saefty.jpg", "rb") as photo:
                await update.message.reply_photo(photo=photo)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
        return

    text = f"üö® *–ê–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}:*\n"
    for alert in alerts:
        raion = alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω")
        alert_type = alert.get("alert_type", "–Ω–µ–≤—ñ–¥–æ–º–æ")
        alert_type_ua = ALERT_TYPES_UA.get(alert_type, alert_type)
        text += f"‚Ä¢ {raion} ‚Äî {alert_type_ua}\n"
    await update.message.reply_markdown(text)


async def city_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE, city_name, city_label):
    alerts = await fetch_alerts(city_name, city_type="city")
    if not alerts:
        await update.message.reply_text(f"‚úÖ –£ {city_label} –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ!")
        try:
            with open("images/Saefty.jpg", "rb") as photo:
                await update.message.reply_photo(photo=photo)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
        return

    text = f"üö® –£ {city_label} –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!\n"
    for alert in alerts:
        raion = alert.get("location_title", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–∞–π–æ–Ω")
        alert_type = alert.get("alert_type", "–Ω–µ–≤—ñ–¥–æ–º–æ")
        alert_type_ua = ALERT_TYPES_UA.get(alert_type, alert_type)
        text += f"‚Ä¢ {raion} ‚Äî {alert_type_ua}\n"
    await update.message.reply_text(text)


async def krym_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await city_alerts(update, context, "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º", "–ö—Ä–∏–º")


async def kyiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await city_alerts(update, context, "–º. –ö–∏—ó–≤", "–ö–∏—ó–≤")


async def odesa_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await city_alerts(update, context, "–º. –û–¥–µ—Å–∞", "–û–¥–µ—Å–∞")


async def frankivsk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await city_alerts(update, context, "–º. –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫", "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫")


# ===== –§–æ–Ω–æ–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è API =====
async def process_alerts(app):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —Ç–∞ —Ä–æ–∑—Å–∏–ª–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É —á–∞—Ç."""
    global current_region_alerts, alerts_initialized

    alerts = await fetch_alerts(REGION)
    new_state = {a.get("location_title"): a.get("alert_type") for a in alerts}

    # –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫: –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω, —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏ "—Å—Ç–∞—Ä—ñ" —Ç—Ä–∏–≤–æ–≥–∏
    if not alerts_initialized:
        current_region_alerts = new_state
        alerts_initialized = True
        logging.debug("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Å—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥ –±–µ–∑ —Å–ø–æ–≤—ñ—â–µ–Ω—å.")
        return

    # –ù–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏ –ø–æ —Ä–∞–π–æ–Ω–∞—Ö
    for raion, alert_type in new_state.items():
        if current_region_alerts.get(raion) == alert_type:
            continue

        try:
            if CHAT_ID:
                try:
                    with open("images/Alarm.jpg", "rb") as photo:
                        await app.bot.send_photo(chat_id=int(CHAT_ID), photo=photo)
                except Exception as e:
                    logging.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É: {e}")

                alert_text = ALERT_TYPES_UA.get(alert_type, alert_type)
                await app.bot.send_message(
                    chat_id=int(CHAT_ID),
                    text=f"üö® *{raion}* ‚Äî *{alert_text}*",
                    parse_mode="Markdown",
                )
            else:
                logging.info(f"[–ù–û–¢–ò–§] {raion} ‚Äî {alert_type} (CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–æ)")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç—Ä–∏–≤–æ–≥–∏: {e}")

    # –í—ñ–¥–±–æ—ó –ø–æ —Ä–∞–π–æ–Ω–∞—Ö
    for raion, old_type in current_region_alerts.items():
        if raion in new_state:
            continue

        try:
            if CHAT_ID:
                await app.bot.send_message(
                    chat_id=int(CHAT_ID),
                    text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É *{raion}*",
                    parse_mode="Markdown",
                )
            else:
                logging.info(f"[–û–ë–í–Ü–î] –í—ñ–¥–±—ñ–π —É {raion} (CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–æ)")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–±–æ—é –ø–æ —Ä–∞–π–æ–Ω—É: {e}")

    # –ó–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥–±—ñ–π –ø–æ –æ–±–ª–∞—Å—Ç—ñ
    if current_region_alerts and not new_state:
        try:
            if CHAT_ID:
                await app.bot.send_message(chat_id=int(CHAT_ID), text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}")
                try:
                    with open("images/Clear.jpg", "rb") as photo:
                        await app.bot.send_photo(chat_id=int(CHAT_ID), photo=photo)
                except Exception as e:
                    logging.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É Clear: {e}")
            else:
                logging.info(f"[–û–ë–í–Ü–î –û–ë–õ–ê–°–¢–Ü] –í—ñ–¥–±—ñ–π —É {REGION} (CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–æ)")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–±–æ—é –ø–æ –æ–±–ª–∞—Å—Ç—ñ: {e}")

    current_region_alerts = new_state


# ===== –ö–æ–º–∞–Ω–¥–∞ –∞–≤–∞—Ä—ñ–π–Ω–æ—ó –∑—É–ø–∏–Ω–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è ADMIN_ID) =====
async def stopbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await update.message.reply_text("üõë –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑—É–ø–∏–Ω–∫–∏. –í–∏–∫–æ–Ω—É—é –≤–∏–º–∫–Ω–µ–Ω–Ω—è...")
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ shutdown —è–∫ –æ–∫—Ä–µ–º—É –∑–∞–¥–∞—á—É, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä
    asyncio.create_task(_shutdown_sequence(context.application))


async def _shutdown_sequence(app):
    logging.info("üîª Shutdown requested by admin")

    # 1) –∑—É–ø–∏–Ω—è—î–º–æ job_queue, —â–æ–± –Ω–µ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –∑–∞–¥–∞—á—ñ
    try:
        app.job_queue.stop()
    except Exception as e:
        logging.debug(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—ñ–¥ —á–∞—Å job_queue.stop(): {e}")

    # 2) –∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞ —à—É—Ç–¥–∞—É–Ω –¥–æ–¥–∞—Ç–∫—É (–∞–∫–∫—É—Ä–∞—Ç–Ω–æ)
    try:
        await app.shutdown()
    except Exception as e:
        logging.debug(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—ñ–¥ —á–∞—Å app.shutdown(): {e}")
    try:
        await app.stop()
    except Exception as e:
        logging.debug(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—ñ–¥ —á–∞—Å app.stop(): {e}")

    logging.info("‚öôÔ∏è –ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ó—É–ø–∏–Ω—è—é event loop.")
    # 3) –∑—É–ø–∏–Ω—è—î–º–æ event loop (—Ü–µ –ø—Ä–∏–ø–∏–Ω–∏—Ç—å run_forever —É __main__)
    loop = asyncio.get_event_loop()
    loop.stop()


# ===== –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Telegram =====
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error(msg="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —É —Ö–µ–Ω–¥–ª–µ—Ä—ñ:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


# ===== –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª =====
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # ===== –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥ —ñ —Ç–µ–∫—Å—Ç—É =====
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stopbot", stopbot))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å—ñ"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫—É"), frankivsk_alerts))

    app.add_error_handler(error_handler)

    # ===== –§–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ =====
    async def _job_callback(context: ContextTypes.DEFAULT_TYPE):
        await process_alerts(context.application)

    app.job_queue.run_repeating(_job_callback, interval=POLL_INTERVAL, first=0)

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    # –ó–∞–ø—É—Å–∫ polling –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è loop (close_loop=False)
    await app.run_polling(close_loop=False)


# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π event loop: –∑–∞–ø—É—Å–∫–∞—î–º–æ main —è–∫ —Ç–∞—Å–∫—É —ñ —Ç—Ä–∏–º–∞—î–º–æ loop.run_forever()
    loop = asyncio.get_event_loop()
    try:
        loop.create_task(main())
        loop.run_forever()
    except KeyboardInterrupt:
        logging.info("üõë –ó—É–ø–∏–Ω–∫–∞ –≤—Ä—É—á–Ω—É (KeyboardInterrupt)")
    finally:
        # –î–∞–ª—ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ –≤—Å—ñ —Ç–∞—Å–∫–∏
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()
        try:
            loop.run_until_complete(asyncio.gather(*tasks, return_exceptions=True))
        except Exception:
            pass
        loop.close()
        logging.info("Loop closed. Exit.")
