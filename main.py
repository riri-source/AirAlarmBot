import os
import asyncio
import nest_asyncio
import logging
from dataclasses import dataclass, field
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from typing import Dict, Optional
from datetime import datetime
import aiohttp
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ======================================================
# üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# ======================================================
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHAT_ID_ENV = os.getenv("CHAT_ID")
DEFAULT_CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None

if not BOT_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ BOT_TOKEN –∞–±–æ ALERTS_TOKEN")

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

# ======================================================
# üîπ –õ–æ–∫–∞–ª—å–Ω–∏–π HTTP —Å–µ—Ä–≤–µ—Ä (healthcheck)
# ======================================================
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ======================================================
# üîπ –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
# ======================================================
@dataclass
class RegionAlertCache:
    last_alerts: Dict[str, str] = field(default_factory=dict)
    initialized: bool = False

ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

# ======================================================
# üîπ –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# ======================================================
def get_chat_id(app) -> Optional[int]:
    chat_id = app.bot_data.get("chat_id")
    if chat_id:
        return int(chat_id)
    default_chat = app.bot_data.get("default_chat_id")
    return int(default_chat) if default_chat else None


async def send_photo_safe(bot, chat_id: Optional[int], image_path: str) -> None:
    if not chat_id:
        return
    try:
        with open(image_path, "rb") as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except Exception:
        pass


async def _get_api_data():
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL, headers=headers, timeout=10) as resp:
            return await resp.json()

# ======================================================
# üîπ –ú–†–ß ‚Äî –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ + –º. –ö–∏—ó–≤
# ======================================================
async def process_alerts(app, cache: RegionAlertCache):
    """–í—ñ–¥—Å—Ç–µ–∂—É—î —Ç—ñ–ª—å–∫–∏ –ö–∏—ó–≤—Å—å–∫—É –æ–±–ª–∞—Å—Ç—å —ñ –º. –ö–∏—ó–≤"""
    data = await _get_api_data()
    alerts = data.get("alerts", [])
    relevant = [a for a in alerts if a.get("location_oblast") in {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤"}]

    new_state = {a["location_title"]: a["alert_type"] for a in relevant}
    chat_id = get_chat_id(app)

    if not cache.initialized:
        cache.last_alerts = new_state
        cache.initialized = True
        logging.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Å—Ç–∞–Ω –ú–†–ß –±–µ–∑ —Å–ø–æ–≤—ñ—â–µ–Ω—å.")
        return

    # –Ω–æ–≤—ñ –∞–±–æ –∑–º—ñ–Ω–µ–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
    for raion, alert_type in new_state.items():
        if cache.last_alerts.get(raion) != alert_type:
            if chat_id:
                await send_photo_safe(app.bot, chat_id, "images/Alarm.jpg")
                await app.bot.send_message(
                    chat_id=chat_id,
                    text=f"üö® *{raion}* ‚Äî *{ALERT_TYPES_UA.get(alert_type, alert_type)}*",
                    parse_mode="Markdown",
                )

    # –≤—ñ–¥–±–æ—ó
    for raion in list(cache.last_alerts.keys()):
        if raion not in new_state:
            if chat_id:
                await app.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É *{raion}*",
                    parse_mode="Markdown",
                )

    # –∑–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥–±—ñ–π
    if cache.last_alerts and not new_state:
        if chat_id:
            await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}")
            await send_photo_safe(app.bot, chat_id, "images/Clear.jpg")

    cache.last_alerts = new_state


# ======================================================
# üîπ –†—É—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ ‚Äî –æ–∫—Ä–µ–º–æ –≤—ñ–¥ –ú–†–ß
# ======================================================
async def region_status(keyword: str) -> bool:
    """–ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∏–≤–æ–≥—É –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É."""
    data = await _get_api_data()
    kw = keyword.lower()
    for a in data.get("alerts", []):
        if a.get("finished_at") is None:
            oblast = (a.get("location_oblast") or "").lower()
            title = (a.get("location_title") or "").lower()
            if kw in oblast or kw in title:
                return True
    return False


async def krym_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await region_status("–∫—Ä–∏–º")
    chat_id = update.effective_chat.id
    if active:
        await update.message.reply_text("üö® –£ –ö—Ä–∏–º—É —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
        await send_photo_safe(context.application.bot, chat_id, "images/Alarm.jpg")
    else:
        await update.message.reply_text("‚úÖ –£ –ö—Ä–∏–º—É –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")
        await send_photo_safe(context.application.bot, chat_id, "images/Saefty.jpg")


async def lugansk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await region_status("–ª—É–≥–∞–Ω")
    chat_id = update.effective_chat.id
    if active:
        await update.message.reply_text("üö® –£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
        await send_photo_safe(context.application.bot, chat_id, "images/Alarm.jpg")
    else:
        await update.message.reply_text("‚úÖ –£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")
        await send_photo_safe(context.application.bot, chat_id, "images/Saefty.jpg")


async def chernihiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await region_status("—á–µ—Ä–Ω—ñ–≥")
    chat_id = update.effective_chat.id
    if active:
        await update.message.reply_text("üö® –£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
        await send_photo_safe(context.application.bot, chat_id, "images/Alarm.jpg")
    else:
        await update.message.reply_text("‚úÖ –£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")
        await send_photo_safe(context.application.bot, chat_id, "images/Saefty.jpg")


# ======================================================
# üîπ –ö–æ–º–∞–Ω–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# ======================================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.application.bot_data["chat_id"] = update.effective_chat.id
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç üå∏\n–Ø —Å–ø–æ–≤—ñ—â–∞—é –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏ –≤ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ.\n"
        f"–ù–∞–ø–∏—à–∏ ¬´—â–æ –ø–æ –ö—Ä–∏–º—É¬ª –∞–±–æ ¬´—â–æ –ø–æ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π¬ª –¥–ª—è —Ä—É—á–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫."
    )


async def stopbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await update.message.reply_text("üõë –ó—É–ø–∏–Ω—è—é —Ä–æ–±–æ—Ç—É...")
    asyncio.create_task(_shutdown_sequence(context.application))


async def _shutdown_sequence(app):
    try:
        app.job_queue.stop()
        await app.shutdown()
        await app.stop()
    except Exception:
        pass
    asyncio.get_event_loop().stop()


async def error_handler(update, context):
    logging.error("–ü–æ–º–∏–ª–∫–∞:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")


# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# ======================================================
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    if DEFAULT_CHAT_ID:
        app.bot_data["chat_id"] = DEFAULT_CHAT_ID
        app.bot_data["default_chat_id"] = DEFAULT_CHAT_ID

    cache = RegionAlertCache()
    app.bot_data["alert_cache"] = cache

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stopbot", stopbot))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –ª—É–≥–∞–Ω"), lugansk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"), chernihiv_alerts))

    app.add_error_handler(error_handler)

    # –ú–†–ß-–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    async def _poll(context: ContextTypes.DEFAULT_TYPE):
        await process_alerts(context.application, cache)

    app.job_queue.run_repeating(_poll, interval=POLL_INTERVAL, first=0)

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
    await app.run_polling(close_loop=False)


# ======================================================
# üîπ –ó–∞–ø—É—Å–∫
# ======================================================
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.create_task(main())
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        for task in asyncio.all_tasks():
            task.cancel()
        loop.close()
        logging.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
