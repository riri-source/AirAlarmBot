import os
import asyncio
import logging
import nest_asyncio
import time
from dataclasses import dataclass, field
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from typing import Dict, Optional
from datetime import datetime

import aiohttp
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ===== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è =====
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHAT_ID_ENV = os.getenv("CHAT_ID")
DEFAULT_CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None
API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

if not BOT_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ BOT_TOKEN –∞–±–æ ALERTS_TOKEN")

# ===== Healthcheck HTTP =====
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), StubHandler).serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ===== –°—Ç—Ä—É–∫—Ç—É—Ä–∏ =====
ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

@dataclass
class RegionAlertCache:
    last_alerts: Dict[str, str] = field(default_factory=dict)
    initialized: bool = False

# ===== –•–µ–ª–ø–µ—Ä–∏ =====
def get_chat_id(app) -> Optional[int]:
    cid = app.bot_data.get("chat_id") or app.bot_data.get("default_chat_id")
    return int(cid) if cid else None

async def send_photo_safe(bot, chat_id, path):
    if not chat_id:
        return False
    try:
        with open(path, "rb") as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
        return True
    except FileNotFoundError:
        logging.warning(f"–ù–µ–º–∞ —Ñ–∞–π–ª—É {path}")
    except Exception as e:
        logging.debug(f"send_photo_safe –ø–æ–º–∏–ª–∫–∞: {e}")
    return False

# ====================================================
# üü¢  –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è API
# ====================================================

async def fetch_region_alerts():
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ + –º. –ö–∏—ó–≤."""
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, timeout=10, params={"_": int(time.time())}) as resp:
                data = await resp.json()
    except Exception as e:
        logging.error(f"API (–ú–†–ß) –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

    alerts = [
        a for a in data.get("alerts", [])
        if a.get("location_oblast") in ("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤")
    ]
    logging.info(f"–ú–†–ß: {len(alerts)} –∑–∞–ø–∏—Å(—ñ–≤) –¥–ª—è –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ/–º.–ö–∏—ó–≤")
    return alerts


async def fetch_location_alerts(location_name):
    """–¢–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±—É–¥—å-—è–∫–µ –º—ñ—Å—Ç–æ/–æ–±–ª–∞—Å—Ç—å)."""
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, timeout=10, params={"_": int(time.time())}) as resp:
                data = await resp.json()
    except Exception as e:
        logging.error(f"API (—Ä—É—á–Ω–∏–π –∑–∞–ø–∏—Ç) –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

    alerts = []
    for a in data.get("alerts", []):
        if a.get("location_title") == location_name or a.get("location_oblast") == location_name:
            alerts.append(a)
    return alerts

# ====================================================
# üü£  Telegram —Ö–µ–Ω–¥–ª–µ—Ä–∏
# ====================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    context.application.bot_data["chat_id"] = cid
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç üå∏\n"
        "–ë–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –ö–∏—ó–≤—Å—å–∫—É –æ–±–ª–∞—Å—Ç—å —Ç–∞ –º.–ö–∏—ó–≤ —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.\n"
        "–ù–∞–ø–∏—à–∏: ¬´—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ¬ª, ¬´—è–∫ —Ç–∞–º –ö—Ä–∏–º¬ª, ¬´—â–æ –ø–æ –û–¥–µ—Å—ñ¬ª ‚Äî —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –≤—Ä—É—á–Ω—É."
    )

async def oblast_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    alerts = await fetch_location_alerts("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
    if not alerts:
        await update.message.reply_text("‚úÖ –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å ‚Äî –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ!")
        await send_photo_safe(context.application.bot, update.effective_chat.id, "images/Saefty.jpg")
        return
    text = "üö® *–ê–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —É –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ:*\n"
    for a in alerts:
        text += f"‚Ä¢ {a.get('location_title','‚Äî')} ‚Äî {ALERT_TYPES_UA.get(a.get('alert_type'),'—Ç—Ä–∏–≤–æ–≥–∞')}\n"
    await update.message.reply_markdown(text)

async def city_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE, name, label):
    alerts = await fetch_location_alerts(name)
    if not alerts:
        await update.message.reply_text(f"‚úÖ –£ {label} –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ!")
        await send_photo_safe(context.application.bot, update.effective_chat.id, "images/Saefty.jpg")
        return
    text = f"üö® –£ {label} –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!\n"
    for a in alerts:
        text += f"‚Ä¢ {a.get('location_title','‚Äî')} ‚Äî {ALERT_TYPES_UA.get(a.get('alert_type'),'—Ç—Ä–∏–≤–æ–≥–∞')}\n"
    await update.message.reply_text(text)

async def krym_alerts(update, context): await city_alerts(update, context, "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º", "–ö—Ä–∏–º")
async def kyiv_alerts(update, context): await city_alerts(update, context, "–º. –ö–∏—ó–≤", "–ö–∏—ó–≤")
async def odesa_alerts(update, context): await city_alerts(update, context, "–º. –û–¥–µ—Å–∞", "–û–¥–µ—Å–∞")
async def frankivsk_alerts(update, context): await city_alerts(update, context, "–º. –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫", "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫")

# ====================================================
# üü†  –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É (–ú–†–ß)
# ====================================================

async def process_alerts(app, cache: RegionAlertCache):
    tick = datetime.now().strftime("%H:%M:%S")
    logging.info(f"‚è± –ú–†–ß –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ @ {tick}")
    alerts = await fetch_region_alerts()
    new_state = {a.get("location_title"): a.get("alert_type") for a in alerts}

    if not cache.initialized:
        cache.last_alerts = new_state
        cache.initialized = True
        return

    chat_id = get_chat_id(app)
    if not chat_id:
        logging.info("–ú–†–ß: CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–æ")
        return

    started = [(r, ALERT_TYPES_UA.get(t, t)) for r, t in new_state.items() if cache.last_alerts.get(r) != t]
    ended = [r for r in cache.last_alerts.keys() if r not in new_state]

    if not started and not ended:
        cache.last_alerts = new_state
        return

    if started:
        await send_photo_safe(app.bot, chat_id, "images/Alarm.jpg")
    lines = []
    if started:
        lines.append("üö® *–ù–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏:*")
        for r, t in started: lines.append(f"‚Ä¢ *{r}* ‚Äî {t}")
    if ended:
        lines.append("")
        lines.append("‚úÖ *–í—ñ–¥–±—ñ–π —É:*")
        for r in ended: lines.append(f"‚Ä¢ {r}")
    await app.bot.send_message(chat_id=chat_id, text="\n".join(lines), parse_mode="Markdown")

    cache.last_alerts = new_state

# ====================================================
# üõ†  –°–ª—É–∂–±–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
# ====================================================

async def status(update, context):
    cache: RegionAlertCache = context.application.bot_data.get("alert_cache") or RegionAlertCache()
    keys = ", ".join(cache.last_alerts.keys()) or "‚Äî"
    cid = get_chat_id(context.application)
    await update.message.reply_text(
        f"‚ÑπÔ∏è –ú–†–ß-–∑–æ–Ω–∞: –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å + –º.–ö–∏—ó–≤\n"
        f"CHAT_ID: {cid or '–Ω–µ–º–∞'}\n"
        f"POLL_INTERVAL: {POLL_INTERVAL}s\n"
        f"–†–∞–π–æ–Ω–∏: {keys}"
    )

async def stopbot(update, context):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õîÔ∏è –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
    await update.message.reply_text("üõë –í–∏–º–∏–∫–∞—é –±–æ—Ç–∞...")
    asyncio.create_task(_shutdown_sequence(context.application))

async def _shutdown_sequence(app):
    logging.info("üîª –ó—É–ø–∏–Ω–∫–∞ –ú–†–ß")
    try: app.job_queue.stop()
    except: pass
    try: await app.shutdown()
    except: pass
    try: await app.stop()
    except: pass
    asyncio.get_event_loop().stop()

# ====================================================
# üîπ  –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# ====================================================

async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    if DEFAULT_CHAT_ID:
        app.bot_data["chat_id"] = DEFAULT_CHAT_ID
        app.bot_data["default_chat_id"] = DEFAULT_CHAT_ID

    cache = RegionAlertCache()
    app.bot_data["alert_cache"] = cache

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("stopbot", stopbot))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å—ñ"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫—É"), frankivsk_alerts))

    # –ú–†–ß JobQueue
    async def _job(context: ContextTypes.DEFAULT_TYPE):
        await process_alerts(context.application, cache)

    app.job_queue.run_repeating(_job, interval=POLL_INTERVAL, first=0)

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (–ú–†–ß –ö–∏—ó–≤ + –æ–±–ª–∞—Å—Ç—å)...")
    await app.run_polling(close_loop=False)

# ====================================================
# üöÄ  –ó–∞–ø—É—Å–∫
# ====================================================

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.create_task(main())
        loop.run_forever()
    except KeyboardInterrupt:
        logging.info("üõë –ó—É–ø–∏–Ω–∫–∞ –≤—Ä—É—á–Ω—É")
    finally:
        for t in asyncio.all_tasks():
            t.cancel()
        loop.close()
        logging.info("Loop closed. Exit.")
