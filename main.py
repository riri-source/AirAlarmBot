import os
import asyncio
import logging
import json
import nest_asyncio
from dataclasses import dataclass, field
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from typing import Dict, Optional
from datetime import datetime
import aiohttp
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# ======================================================
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHAT_ID_ENV = os.getenv("CHAT_ID")
DEFAULT_CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None
API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

if not BOT_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ BOT_TOKEN –∞–±–æ ALERTS_TOKEN")

# ======================================================
# üîπ –õ–æ–∫–∞–ª—å–Ω–∏–π HTTP —Å–µ—Ä–≤–µ—Ä (healthcheck)
# ======================================================
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ======================================================
# üîπ –ö–ª–∞—Å–∏ —Ç–∞ —Ö–µ–ª–ø–µ—Ä–∏
# ======================================================
@dataclass
class RegionAlertCache:
    last_alerts: Dict[str, str] = field(default_factory=dict)   # –∫–ª—é—á: "–û–±–ª–∞—Å—Ç—å::–†–∞–π–æ–Ω/–ì—Ä–æ–º–∞–¥–∞/–ù–∞–∑–≤–∞"
    initialized: bool = False

ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

KYIV_SUBREGIONS = [
    "–í–∏—à–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë—É—á–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–§–∞—Å—Ç—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–û–±—É—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë—ñ–ª–æ—Ü–µ—Ä–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω"
]

def get_chat_id(app) -> Optional[int]:
    chat_id = app.bot_data.get("chat_id")
    if chat_id:
        return int(chat_id)
    default_chat = app.bot_data.get("default_chat_id")
    return int(default_chat) if default_chat else None

async def send_photo_safe(bot, chat_id: Optional[int], image_path: str):
    if not chat_id:
        return
    try:
        with open(image_path, "rb") as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except Exception:
        pass

async def _get_api_data():
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL, headers=headers, timeout=10) as resp:
            return await resp.json()

# ======================================================
# üîπ –°–ª—É–∂–±–æ–≤—ñ (–¥–ª—è –∞–¥–º—ñ–Ω—É)
# ======================================================
async def send_all_oblasts_to_admin(bot, admin_id: int):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—É —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –æ–±–ª–∞—Å—Ç–µ–π, —è–∫—ñ –±–∞—á–∏—Ç—å API."""
    try:
        data = await _get_api_data()
        oblasts = sorted({a.get("location_oblast") for a in data.get("alerts", []) if a.get("location_oblast")})
        if not oblasts:
            await bot.send_message(chat_id=admin_id, text="‚ö†Ô∏è API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–æ –∂–æ–¥–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ.")
            return
        text = "üß≠ *–°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π, —è–∫—ñ –±–∞—á–∏—Ç—å API:*\n\n" + "\n".join(f"‚Ä¢ {o}" for o in oblasts)
        await bot.send_message(chat_id=admin_id, text=text, parse_mode="Markdown")
    except Exception as e:
        await bot.send_message(chat_id=admin_id, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API:\n{e}")

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è / –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
# ======================================================
def _dict_path() -> str:
    return os.path.join(os.path.dirname(os.path.abspath(__file__)), "locations_dict.json")

def load_locations_dict() -> Dict:
    fp = _dict_path()
    if not os.path.exists(fp):
        with open(fp, "w", encoding="utf-8") as f:
            json.dump({"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": {}}, f, ensure_ascii=False, indent=2)
    with open(fp, "r", encoding="utf-8") as f:
        return json.load(f)

def save_locations_dict(data: Dict):
    fp = _dict_path()
    with open(fp, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ======================================================
# üîπ –ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ (–≤—Å—è –£–∫—Ä–∞—ó–Ω–∞) + –≥—Ä—É–ø–∞ –ª–∏—à–µ –ö–∏—ó–≤—â–∏–Ω–∞
# ======================================================
async def process_alerts(app, cache: RegionAlertCache):
    data = await _get_api_data()
    alerts = data.get("alerts", [])
    new_state = {f"{a['location_oblast']}::{a['location_title']}": a["alert_type"] for a in alerts}

    chat_id = get_chat_id(app)
    admin_chat = int(ADMIN_ID)
    now = datetime.now().strftime("%H:%M:%S")
    logging.info(f"‚è± –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API @ {now} ({len(new_state)} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥)")

    # –î–ª—è —Å–ª–æ–≤–Ω–∏–∫–æ–≤–æ–≥–æ –∞–¥–¥–æ–Ω—É –∫–µ—à –ö–∏—ó–≤—â–∏–Ω–∏ –∑—Ä—É—á–Ω–æ –º–∞—Ç–∏ –æ–∫—Ä–µ–º–æ
    app.bot_data["kyiv_current_keys"] = {k for k in new_state.keys() if k.startswith("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å::") or k.startswith("–º. –ö–∏—ó–≤::")}

    if not cache.initialized:
        cache.last_alerts = new_state
        cache.initialized = True
        return

    # –ù–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ
    for key, alert_type in new_state.items():
        if cache.last_alerts.get(key) == alert_type:
            continue
        oblast, title = key.split("::", 1)
        text = f"üö® *{oblast}* ‚Äî {title}: *{ALERT_TYPES_UA.get(alert_type, alert_type)}*"

        # –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –≤—Å–µ
        if admin_chat:
            await app.bot.send_message(chat_id=admin_chat, text=text, parse_mode="Markdown")

        # –≥—Ä—É–ø–∞ ‚Äî –ª–∏—à–µ –ö–∏—ó–≤—â–∏–Ω–∞ (–∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é)
        if chat_id and (oblast in {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤"}):
            await send_photo_safe(app.bot, chat_id, "images/Alarm.jpg")
            await app.bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")

    # –í—ñ–¥–±–æ—ó
    for key in list(cache.last_alerts.keys()):
        if key not in new_state:
            oblast, title = key.split("::", 1)
            text = f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É *{oblast}* ‚Äî {title}"
            if admin_chat:
                await app.bot.send_message(chat_id=admin_chat, text=text, parse_mode="Markdown")
            if chat_id and (oblast in {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤"}):
                await app.bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")

    # –ó–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥–±—ñ–π –ø–æ –æ–±–ª–∞—Å—Ç—ñ (–∫–∞—Ä—Ç–∏–Ω–∫–∞) ‚Äî –ª–∏—à–µ –¥–ª—è –ö–∏—ó–≤—â–∏–Ω–∏
    # –Ø–∫—â–æ —Ä–∞–Ω—ñ—à–µ –±—É–ª–∏ –∫–ª—é—á—ñ –ö–∏—ó–≤—â–∏–Ω–∏, –∞ —Ç–µ–ø–µ—Ä –∂–æ–¥–Ω–æ–≥–æ
    if chat_id:
        had_kyiv = any(k.startswith("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å::") or k.startswith("–º. –ö–∏—ó–≤::") for k in cache.last_alerts.keys())
        has_kyiv = any(k.startswith("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å::") or k.startswith("–º. –ö–∏—ó–≤::") for k in new_state.keys())
        if had_kyiv and not has_kyiv:
            await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}")
            await send_photo_safe(app.bot, chat_id, "images/Clear.jpg")

    cache.last_alerts = new_state

# ======================================================
# üîπ –†—É—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ (—è–∫ –±—É–ª–æ —É v6)
# ======================================================
async def _region_status(keyword: str) -> bool:
    data = await _get_api_data()
    kw = keyword.lower()
    for a in data.get("alerts", []):
        if a.get("finished_at") is None:
            oblast = (a.get("location_oblast") or "").lower()
            title = (a.get("location_title") or "").lower()
            if kw in oblast or kw in title:
                return True
    return False

async def krym_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status("–∫—Ä–∏–º")
    await update.message.reply_text("üö® –£ –ö—Ä–∏–º—É —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –£ –ö—Ä–∏–º—É –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def odesa_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status("–æ–¥–µ—Å")
    await update.message.reply_text("üö® –í –û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –í –û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def oblast_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status("–∫–∏—ó–≤—Å—å–∫–∞")
    await update.message.reply_text("üö® –£ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –£ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def kyiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status("–∫–∏—ó–≤")
    await update.message.reply_text("üö® –£ –ö–∏—î–≤—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –£ –ö–∏—î–≤—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def lugansk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status("–ª—É–≥–∞–Ω")
    await update.message.reply_text("üö® –£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def chernihiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status("—á–µ—Ä–Ω—ñ–≥")
    await update.message.reply_text("üö® –£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def frankivsk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status("—Ñ—Ä–∞–Ω–∫")
    await update.message.reply_text("üö® –í –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –í –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

# ======================================================
# üîπ –°–ª–æ–≤–Ω–∏–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç + —Å–æ—Ü—ñ–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è (–∞–¥–¥–æ–Ω)
# ======================================================
def _normalize(s: str) -> str:
    return " ".join((s or "").lower().replace("?", "").replace("!", "").strip().split())

async def handle_dynamic_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """'—â–æ –ø–æ <–Ω–∞–∑–≤—ñ>' ‚Äî —à—É–∫–∞—î–º–æ —É —Å–ª–æ–≤–Ω–∏–∫—É –ö–∏—ó–≤—â–∏–Ω–∏; —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É."""
    text = (update.message.text or "")
    if not text.lower().startswith("—â–æ –ø–æ"):
        return

    keyword = _normalize(text.replace("—â–æ –ø–æ", "", 1))
    if not keyword:
        return

    locations = context.application.bot_data.get("locations_dict", {}).get("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", {})

    # –ø–æ—à—É–∫ —Ç–æ—á–Ω–∏–π –∞–±–æ —á–∞—Å—Ç–∫–æ–≤–∏–π
    region = None
    for k, v in locations.items():
        if keyword == _normalize(k) or keyword in _normalize(k):
            region = v
            break

    if region:
        # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —ñ–∑ –∫–µ—à—É –ö–∏—ó–≤—â–∏–Ω–∏ (–±–µ–∑ –¥–æ–¥–∑–∞–ø–∏—Ç—ñ–≤)
        active_keys = context.application.bot_data.get("kyiv_current_keys", set())
        # —Ä–µ–≥—ñ–æ–Ω –≤ new_state –º–∞—î –≤–∏–≥–ª—è–¥ "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å::–ë—É—á–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω" —Ç–æ—â–æ
        is_active = any(f"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å::{region}" in key or f"–º. –ö–∏—ó–≤::{region}" in key for key in active_keys)
        await update.message.reply_text(f"üö® –£ {region} —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if is_active else f"‚úÖ –£ {region} –∑–∞—Ä–∞–∑ –≤—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ.")
        return

    # –ù–µ –∑–Ω–∞–π—à–ª–∏ ‚Äî –ø–∏—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É
    markup = ReplyKeyboardMarkup([[KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ")]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "ü§î –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—É –≥—Ä—É–ø–∏ —â–æ–± –¥–æ–¥–∞—Ç–∏? (—Ç–∞–∫/–Ω—ñ)",
        reply_markup=markup,
    )
    # –∑–±–µ—Ä–µ–∂–µ–º–æ –∑–∞–ø–∏—Ç —Å–∞–º–µ –∑–∞ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    context.user_data["pending_location"] = keyword

async def user_send_to_admin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î '—Ç–∞–∫/–Ω—ñ' –Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É."""
    txt = (update.message.text or "").strip().lower()
    if txt not in {"—Ç–∞–∫", "–Ω—ñ"}:
        return
    pending = context.user_data.pop("pending_location", None)
    if not pending:
        return
    if txt == "–Ω—ñ":
        await update.message.reply_text("üôÇ –î–æ–±—Ä–µ, –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –∞–¥–º—ñ–Ω—É.")
        return

    # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –π —Ñ—ñ–∫—Å—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —É bot_data (—Å–ø—Ä–æ—â–µ–Ω–æ ‚Äî –æ—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∞)
    context.application.bot_data["admin_pending_name"] = pending
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì© –ù–æ–≤–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º:\n<b>{pending.title()}</b>\n–î–æ–¥–∞—Ç–∏ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞?",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("‚úÖ –î–æ–¥–∞—Ç–∏"), KeyboardButton("‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏")]],
            resize_keyboard=True
        ),
    )
    await update.message.reply_text("‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.")

async def admin_add_ignore(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º—ñ–Ω –æ–±–∏—Ä–∞—î: –¥–æ–¥–∞—Ç–∏ / —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏."""
    if update.effective_user.id != ADMIN_ID:
        return
    txt = (update.message.text or "").strip()
    if txt not in {"‚úÖ –î–æ–¥–∞—Ç–∏", "‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏"}:
        return
    name = context.application.bot_data.get("admin_pending_name")
    if not name:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è.")
        return
    if txt == "‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏":
        context.application.bot_data.pop("admin_pending_name", None)
        await update.message.reply_text("üö´ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        return

    # ‚úÖ –î–æ–¥–∞—Ç–∏ ‚Äî –ø–∏—Ç–∞—î–º–æ –æ–±–ª–∞—Å—Ç—å (–∑—ñ —Å–ø–∏—Å–∫—É, —â–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑ API)
    try:
        data = await _get_api_data()
        oblasts = sorted({a.get("location_oblast") for a in data.get("alerts", []) if a.get("location_oblast")})
        # –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –ö–∏—ó–≤—Å—å–∫—É, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–º–∞—î —É —Ñ—ñ–¥—ñ
        if "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å" not in oblasts:
            oblasts.insert(0, "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
    except Exception:
        oblasts = ["–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"]
    markup = ReplyKeyboardMarkup([[KeyboardButton(o)] for o in oblasts], resize_keyboard=True)
    await update.message.reply_text(f"üåç –û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è ¬´{name.title()}¬ª:", reply_markup=markup)
    context.application.bot_data["await_region_for"] = name

async def admin_region_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º—ñ–Ω –≤–∏–±–∏—Ä–∞—î –æ–±–ª–∞—Å—Ç—å; —è–∫—â–æ –ö–∏—ó–≤—Å—å–∫–∞ ‚Äî –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ø—Ä–æ—Å–∏–º–æ —Ä–∞–π–æ–Ω."""
    if update.effective_user.id != ADMIN_ID:
        return
    region_txt = (update.message.text or "").strip()
    name = context.application.bot_data.get("await_region_for")
    if not name:
        return

    if region_txt == "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":
        # –æ–±—Ä–∞—Ç–∏ —Ä–∞–π–æ–Ω
        markup = ReplyKeyboardMarkup([[KeyboardButton(r)] for r in KYIV_SUBREGIONS], resize_keyboard=True)
        await update.message.reply_text(f"üèûÔ∏è –î–æ —è–∫–æ–≥–æ —Ä–∞–π–æ–Ω—É –Ω–∞–ª–µ–∂–∏—Ç—å ¬´{name.title()}¬ª?", reply_markup=markup)
        context.application.bot_data["await_subregion_for"] = name
        context.application.bot_data.pop("await_region_for", None)
        return

    # —ñ–Ω—à–∞ –æ–±–ª–∞—Å—Ç—å: –∑–∞–ø–∏—Å—É—î–º–æ "–Ω–∞–∑–≤–∞ –ù–ü -> –æ–±–ª–∞—Å—Ç—å" —è–∫ –±–∞–∑–æ–≤–∏–π —Ç–∞—Ä–≥–µ—Ç
    locations = load_locations_dict()
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ–≤–Ω–∏–∫–∞: –¥–ª—è –ö–∏—ó–≤—â–∏–Ω–∏ ‚Äî –º–∞–ø–∞ –ø—Å–µ–≤–¥–æ–Ω—ñ–º—ñ–≤ —É —Ä–∞–π–æ–Ω.
    # –î–ª—è —ñ–Ω—à–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π –∑–±–µ—Ä–µ–∂–µ–º–æ –ø—ñ–¥ –∫–ª—é—á–µ–º "–Ü–Ω—à—ñ –æ–±–ª–∞—Å—Ç—ñ" –ø—Ä–æ—Å—Ç—É –º–∞–ø—É –¥–æ –æ–±–ª–∞—Å—Ç—ñ.
    # –©–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ–¥–µ–º–æ —Å–µ–∫—Ü—ñ—é –∑ –Ω–∞–∑–≤–æ—é –æ–±–ª–∞—Å—Ç—ñ —Ç–µ–∂ —è–∫ —Ä–æ–∑–¥—ñ–ª.
    section = region_txt
    locations.setdefault(section, {})
    locations[section][name] = section  # –±–∞–∑–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ —Ä—ñ–≤–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ
    save_locations_dict(locations)
    context.application.bot_data["locations_dict"] = locations
    context.application.bot_data.pop("await_region_for", None)
    context.application.bot_data.pop("admin_pending_name", None)
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {name.title()} ‚Üí {section}")

async def admin_subregion_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º—ñ–Ω –≤–∏–±–∏—Ä–∞—î —Ä–∞–π–æ–Ω –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ ‚Äî –¥–æ–ø–∏—Å—É—î–º–æ —É —Å–ª–æ–≤–Ω–∏–∫ —Å–µ–∫—Ü—ñ—ó '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'."""
    if update.effective_user.id != ADMIN_ID:
        return
    subr = (update.message.text or "").strip()
    name = context.application.bot_data.get("await_subregion_for")
    if not name:
        return
    if subr not in KYIV_SUBREGIONS:
        return  # —ñ–≥–Ω–æ—Ä—É—î–º–æ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ —Ä–µ–ø–ª—ñ–∫–∏

    locations = load_locations_dict()
    locations.setdefault("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", {})
    locations["–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"][name] = subr
    save_locations_dict(locations)
    context.application.bot_data["locations_dict"] = locations

    context.application.bot_data.pop("await_subregion_for", None)
    context.application.bot_data.pop("admin_pending_name", None)
    await update.message.reply_text(f"üÜï –î–æ–¥–∞–Ω–æ: {name.title()} ‚Üí {subr}")

# ======================================================
# üîπ /list_regions
# ======================================================
async def list_regions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await update.message.reply_text("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π...")
    await send_all_oblasts_to_admin(context.bot, ADMIN_ID)

# ======================================================
# üîπ –ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
# ======================================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.application.bot_data["chat_id"] = update.effective_chat.id
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç üå∏\n"
        "–Ø –ø–æ–≤—ñ–¥–æ–º–ª—è—é –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏ —É –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ (–≥—Ä—É–ø–∞) —Ç–∞ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ (–∞–¥–º—ñ–Ω—É).\n"
        "–ú–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏: ¬´—â–æ –ø–æ —ñ—Ä–ø–µ–Ω—é?¬ª –∞–±–æ ¬´—â–æ –ø–æ –±–æ—Ä–∏—Å–ø–æ–ª—é?¬ª"
    )

async def stopbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await update.message.reply_text("üõë –ó—É–ø–∏–Ω—è—é —Ä–æ–±–æ—Ç—É...")
    asyncio.create_task(_shutdown_sequence(context.application))

async def _shutdown_sequence(app):
    try:
        app.job_queue.stop()
        await app.shutdown()
        await app.stop()
    except Exception:
        pass
    asyncio.get_event_loop().stop()

async def error_handler(update, context):
    logging.error("–ü–æ–º–∏–ª–∫–∞:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")

# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# ======================================================
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    if DEFAULT_CHAT_ID:
        app.bot_data["chat_id"] = DEFAULT_CHAT_ID
        app.bot_data["default_chat_id"] = DEFAULT_CHAT_ID

    cache = RegionAlertCache()
    app.bot_data["alert_cache"] = cache
    app.bot_data["locations_dict"] = load_locations_dict()

    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ: –ø–æ–∫–∞–∂–µ–º–æ –∞–¥–º—ñ–Ω—É —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π
    await send_all_oblasts_to_admin(app.bot, ADMIN_ID)

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stopbot", stopbot))
    app.add_handler(CommandHandler("list_regions", list_regions))

    # –†—É—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ (—è–∫ —Ä–∞–Ω—ñ—à–µ)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫—É|—â–æ –ø–æ —ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—É|—â–æ –ø–æ —Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—É"), frankivsk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –ª—É–≥–∞–Ω"), lugansk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"), chernihiv_alerts))

    # –°–ª–æ–≤–Ω–∏–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^—â–æ –ø–æ "), handle_dynamic_query))
    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞–∫/–Ω—ñ
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^(—Ç–∞–∫|–Ω—ñ)$"), user_send_to_admin_choice))
    # –ê–¥–º—ñ–Ω: –¥–æ–¥–∞—Ç–∏/—ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^(‚úÖ –î–æ–¥–∞—Ç–∏|‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏)$"), admin_add_ignore))
    # –ê–¥–º—ñ–Ω: –≤–∏–±—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ
    app.add_handler(MessageHandler(filters.TEXT & (~filters.Regex(r"^(‚úÖ –î–æ–¥–∞—Ç–∏|‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏)$") & ~filters.Regex("(?i)^(—Ç–∞–∫|–Ω—ñ)$")), admin_region_selected))
    # –ê–¥–º—ñ–Ω: –≤–∏–±—ñ—Ä —Ä–∞–π–æ–Ω—É –ö–∏—ó–≤—â–∏–Ω–∏
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("|".join(KYIV_SUBREGIONS)), admin_subregion_selected))

    app.add_error_handler(error_handler)

    async def _poll(context: ContextTypes.DEFAULT_TYPE):
        await process_alerts(context.application, cache)

    app.job_queue.run_repeating(_poll, interval=POLL_INTERVAL, first=0)
    app.job_queue.start()

    logging.info("‚úÖ KytsjaAlarm v6 + SocialDictionary Add-on –∑–∞–ø—É—â–µ–Ω–æ.")
    await app.run_polling(close_loop=False)

# ======================================================
# üîπ –ó–∞–ø—É—Å–∫
# ======================================================
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.create_task(main())
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        for task in asyncio.all_tasks():
            task.cancel()
        loop.close()
        logging.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
