import os
import asyncio
import json
import logging
import nest_asyncio
from dataclasses import dataclass, field
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime
from typing import Dict, Optional

import aiohttp
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# ======================================================
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHAT_ID_ENV = os.getenv("CHAT_ID")
DEFAULT_CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None
API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

if not BOT_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –∞–±–æ ALERTS_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ")

# ======================================================
# üîπ Healthcheck-—Å–µ—Ä–≤–µ—Ä
# ======================================================
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), StubHandler).serve_forever()
Thread(target=run_http_server, daemon=True).start()

# ======================================================
# üîπ –ö–ª–∞—Å–∏ —ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
# ======================================================
@dataclass
class RegionAlertCache:
    last_alerts: Dict[str, str] = field(default_factory=dict)
    initialized: bool = False

ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

KYIV_REGIONS = [
    "–ë—É—á–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–í–∏—à–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–§–∞—Å—Ç—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–û–±—É—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë—ñ–ª–æ—Ü–µ—Ä–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–º. –ö–∏—ó–≤"
]

# ======================================================
# üîπ –•–µ–ª–ø–µ—Ä–∏
# ======================================================
def norm(s: str) -> str:
    if not s: return ""
    s = s.lower().strip()
    for bad in ["‚Äô","'","‚Äì","‚Äî","‚Äê","-",".",","]: s = s.replace(bad, " ")
    return " ".join(s.split())

def _dict_path() -> str:
    return os.path.join(os.path.dirname(os.path.abspath(__file__)), "locations_dict.json")

def load_locations_dict() -> Dict:
    path = _dict_path()
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f: json.dump({}, f, ensure_ascii=False, indent=2)
    with open(path, "r", encoding="utf-8") as f: return json.load(f)

def save_locations_dict(data: Dict):
    with open(_dict_path(), "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def _get_api_data():
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    async with aiohttp.ClientSession() as s:
        async with s.get(API_URL, headers=headers, timeout=10) as r:
            return await r.json()

async def send_photo_safe(bot, chat_id: Optional[int], image_path: str):
    if not chat_id: return
    try:
        with open(image_path, "rb") as ph:
            await bot.send_photo(chat_id=chat_id, photo=ph)
    except Exception:
        pass

# ======================================================
# üîπ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
# ======================================================
async def process_alerts(app, cache: RegionAlertCache):
    data = await _get_api_data()
    alerts = data.get("alerts", [])
    chat_id = app.bot_data.get("chat_id")

    relevant_kyiv = [a for a in alerts if a.get("location_oblast") in {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤"}]
    new_state_kyiv = {a["location_title"]: a["alert_type"] for a in relevant_kyiv}
    new_state_global = {f"{a['location_oblast']} ‚Äî {a['location_title']}": a["alert_type"] for a in alerts}

    if not cache.initialized:
        cache.last_alerts = new_state_kyiv
        app.bot_data["last_global_alerts"] = new_state_global
        cache.initialized = True
        return

    # –ö–∏—ó–≤—â–∏–Ω–∞ ‚Üí –≥—Ä—É–ø–∞
    for r, t in new_state_kyiv.items():
        if cache.last_alerts.get(r) != t and chat_id:
            await send_photo_safe(app.bot, chat_id, "images/Alarm.jpg")
            await app.bot.send_message(chat_id=chat_id,
                text=f"üö® *{r}* ‚Äî *{ALERT_TYPES_UA.get(t, t)}*", parse_mode="Markdown")
    for r in list(cache.last_alerts.keys()):
        if r not in new_state_kyiv and chat_id:
            await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É *{r}*", parse_mode="Markdown")
    if cache.last_alerts and not new_state_kyiv and chat_id:
        await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}")
        await send_photo_safe(app.bot, chat_id, "images/Clear.jpg")

    # –ì–ª–æ–±–∞–ª—å–Ω–æ ‚Üí –∞–¥–º—ñ–Ω—É
    last_global = app.bot_data.get("last_global_alerts", {})
    for key, t in new_state_global.items():
        if last_global.get(key) != t:
            await app.bot.send_message(chat_id=ADMIN_ID, text=f"üö® {key}: {ALERT_TYPES_UA.get(t, t)}")
    for key in list(last_global.keys()):
        if key not in new_state_global:
            await app.bot.send_message(chat_id=ADMIN_ID, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏: {key}")

    cache.last_alerts = new_state_kyiv
    app.bot_data["last_global_alerts"] = new_state_global

# ======================================================
# üîπ –†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏
# ======================================================
async def region_status_contains(keyword: str) -> bool:
    data = await _get_api_data()
    kw = keyword.lower()
    for a in data.get("alerts", []):
        if a.get("finished_at") is None:
            if kw in (a.get("location_oblast") or "").lower() or kw in (a.get("location_title") or "").lower():
                return True
    return False

async def _region_reply(update, kw, label):
    if await region_status_contains(kw):
        await update.message.reply_text(f"üö® {label} —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
    else:
        await update.message.reply_text(f"‚úÖ {label} –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def krym_alerts(u,c):       await _region_reply(u, "–∫—Ä–∏–º", "–£ –ö—Ä–∏–º—É")
async def odesa_alerts(u,c):      await _region_reply(u, "–æ–¥–µ—Å", "–í –û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")
async def oblast_alerts(u,c):     await _region_reply(u, "–∫–∏—ó–≤—Å—å–∫–∞", "–£ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")
async def kyiv_alerts(u,c):       await _region_reply(u, "–∫–∏—ó–≤", "–£ –ö–∏—î–≤—ñ")
async def lugansk_alerts(u,c):    await _region_reply(u, "–ª—É–≥–∞–Ω", "–£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")
async def chernihiv_alerts(u,c):  await _region_reply(u, "—á–µ—Ä–Ω—ñ–≥", "–£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")
async def frankivsk_alerts(u,c):  await _region_reply(u, "—Ñ—Ä–∞–Ω–∫", "–í –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ")

# ======================================================
# üîπ /help –∫–æ–º–∞–Ω–¥–∞
# ======================================================
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üß≠ *–ö–æ–º–∞–Ω–¥–∏ KytsjaAlarm Bot*\n\n"
        "üìç *–û—Å–Ω–æ–≤–Ω—ñ:*\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/stopbot ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)\n\n"
        "üì° *–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —ñ –∑–∞–ø–∏—Ç–∏:*\n"
        "/list_regions ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –æ–±–ª–∞—Å—Ç—ñ, —è–∫—ñ –±–∞—á–∏—Ç—å API\n"
        "/export_dict ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –Ω–∞–∑–≤ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)\n\n"
        "üó∫ *–¢–µ–∫—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏:*\n"
        "¬´—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ¬ª ‚Äî –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\n"
        "¬´—â–æ –ø–æ –ö–∏—î–≤—É¬ª ‚Äî –º. –ö–∏—ó–≤\n"
        "¬´—è–∫ —Ç–∞–º –ö—Ä–∏–º?¬ª ‚Äî –ö—Ä–∏–º\n"
        "¬´—â–æ –ø–æ –§—Ä–∞–Ω–∏–∫—É¬ª ‚Äî –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\n"
        "¬´—â–æ –ø–æ <–Ω–∞–∑–≤—ñ>¬ª ‚Äî –±—É–¥—å-—è–∫–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞\n\n"
        "üì© –Ø–∫—â–æ –±–æ—Ç—É –Ω–µ–≤—ñ–¥–æ–º–∏–π –ø—É–Ω–∫—Ç ‚Äî –≤—ñ–Ω –∑–∞–ø–∏—Ç–∞—î, —á–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

# ======================================================
# üîπ –†–µ—à—Ç–∞ –∫–æ–º–∞–Ω–¥
# ======================================================
async def export_dict(update, ctx):
    if update.effective_user.id != ADMIN_ID: return
    data = ctx.application.bot_data.get("locations_dict", {})
    await update.message.reply_text(f"<pre>{json.dumps(data, ensure_ascii=False, indent=2)}</pre>", parse_mode="HTML")

async def list_regions(update, ctx):
    await update.message.reply_text("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π...")
    data = await _get_api_data()
    regs = sorted(set(a["location_oblast"] for a in data.get("alerts", []) if a.get("location_oblast")))
    txt = "üß≠ –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π, —è–∫—ñ –±–∞—á–∏—Ç—å API:\n\n" + "\n".join(f"‚Ä¢ {r}" for r in regs) if regs else "‚ùå API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–∏—Ö."
    await update.message.reply_text(txt)

async def start(update, ctx):
    ctx.application.bot_data["chat_id"] = update.effective_chat.id
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç üå∏ –ë–æ—Ç –ø—Ä–∞—Ü—é—î. –û—Ç—Ä–∏–º—É—é –ø–æ—Ç–æ—á–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏...")
    data = await _get_api_data()
    alerts = data.get("alerts", [])
    if not alerts:
        await ctx.bot.send_message(chat_id=ADMIN_ID, text="‚úÖ –í –£–∫—Ä–∞—ó–Ω—ñ –≤—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ.")
    else:
        lines = [f"üö® {a['location_oblast']} ‚Äî {a['location_title']}: {ALERT_TYPES_UA.get(a['alert_type'],'')}" for a in alerts]
        await ctx.bot.send_message(chat_id=ADMIN_ID, text="üó∫ –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:\n" + "\n".join(lines))

async def stopbot(update, ctx):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    await update.message.reply_text("üõë –ó—É–ø–∏–Ω—è—é —Ä–æ–±–æ—Ç—É...")
    try:
        ctx.application.job_queue.stop()
        await ctx.application.shutdown()
        await ctx.application.stop()
        asyncio.get_event_loop().stop()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ: {e}")

async def error_handler(update, ctx):
    logging.error("–ü–æ–º–∏–ª–∫–∞:", exc_info=ctx.error)

# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# ======================================================
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    if DEFAULT_CHAT_ID:
        app.bot_data["chat_id"] = DEFAULT_CHAT_ID
        app.bot_data["default_chat_id"] = DEFAULT_CHAT_ID

    cache = RegionAlertCache()
    app.bot_data["alert_cache"] = cache
    app.bot_data["locations_dict"] = load_locations_dict()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stopbot", stopbot))
    app.add_handler(CommandHandler("list_regions", list_regions))
    app.add_handler(CommandHandler("export_dict", export_dict))

    # –†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –ª—É–≥–∞–Ω"), lugansk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"), chernihiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫|—â–æ –ø–æ —ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫"), frankivsk_alerts))

    app.add_error_handler(error_handler)

    async def _poll(ctx: ContextTypes.DEFAULT_TYPE):
        await process_alerts(ctx.application, cache)

    app.job_queue.run_repeating(_poll, interval=POLL_INTERVAL, first=0)
    await app.run_polling(close_loop=False)

# ======================================================
# üîπ –ó–∞–ø—É—Å–∫
# ======================================================
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
