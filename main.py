import os
import asyncio
import logging
import json
import nest_asyncio
from dataclasses import dataclass, field
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from typing import Dict, Optional, Set
from datetime import datetime

import aiohttp
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ======================================================
# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# ======================================================
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ALERTS_TOKEN = os.getenv("ALERTS_TOKEN")
REGION = os.getenv("REGION", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 25))
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHAT_ID_ENV = os.getenv("CHAT_ID")
DEFAULT_CHAT_ID = int(CHAT_ID_ENV) if CHAT_ID_ENV else None
API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

if not BOT_TOKEN or not ALERTS_TOKEN:
    raise RuntimeError("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ BOT_TOKEN –∞–±–æ ALERTS_TOKEN")

# ======================================================
# üîπ –õ–æ–∫–∞–ª—å–Ω–∏–π HTTP —Å–µ—Ä–≤–µ—Ä (healthcheck)
# ======================================================
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), StubHandler)
    server.serve_forever()

Thread(target=run_http_server, daemon=True).start()

# ======================================================
# üîπ –ö–ª–∞—Å–∏/—Å–ª–æ–≤–Ω–∏–∫–∏/—Ö–µ–ª–ø–µ—Ä–∏
# ======================================================
@dataclass
class RegionAlertCache:
    last_alerts: Dict[str, str] = field(default_factory=dict)
    initialized: bool = False

ALERT_TYPES_UA = {
    "air_raid": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!",
    "chemical": "–•—ñ–º—ñ—á–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "radiation": "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "other": "–Ü–Ω—à–∞ —Ç—Ä–∏–≤–æ–≥–∞",
}

KYIV_OBLAST_NAMES: Set[str] = {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–º. –ö–∏—ó–≤"}

OBLASTS_ALL = [
    "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º",
    "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–º. –ö–∏—ó–≤",
    "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
]

KYIV_SUBREGIONS = [
    "–í–∏—à–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–ë—É—á–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–§–∞—Å—Ç—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–û–±—É—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–ë—ñ–ª–æ—Ü–µ—Ä–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
]

def get_chat_id(app) -> Optional[int]:
    chat_id = app.bot_data.get("chat_id")
    if chat_id:
        return int(chat_id)
    default_chat = app.bot_data.get("default_chat_id")
    return int(default_chat) if default_chat else None

async def send_photo_safe(bot, chat_id: Optional[int], image_path: str):
    if not chat_id:
        return
    try:
        with open(image_path, "rb") as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except Exception:
        pass

async def _get_api_data():
    headers = {"Authorization": f"Bearer {ALERTS_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL, headers=headers, timeout=10) as resp:
            return await resp.json()

# ======================================================
# üîπ –°–ª–æ–≤–Ω–∏–∫ –ª–æ–∫–∞—Ü—ñ–π (JSON) ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
# ======================================================
def dict_path() -> str:
    return os.path.join(os.path.dirname(os.path.abspath(__file__)), "locations_dict.json")

def load_locations_dict() -> Dict:
    path = dict_path()
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f:
            json.dump({"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": {}}, f, ensure_ascii=False, indent=2)
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def save_locations_dict(data: Dict):
    path = dict_path()
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ======================================================
# üîπ –°–ª—É–∂–±–æ–≤—ñ: —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π ‚Üí –∞–¥–º—ñ–Ω—É
# ======================================================
async def send_all_oblasts_to_admin(bot, admin_id: int):
    try:
        data = await _get_api_data()
        oblasts = sorted({a.get("location_oblast") for a in data.get("alerts", []) if a.get("location_oblast")})
        if not oblasts:
            await bot.send_message(chat_id=admin_id, text="‚ö†Ô∏è API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–æ –∂–æ–¥–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ.")
            return
        text = "üß≠ *–°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π, —è–∫—ñ –±–∞—á–∏—Ç—å API:*\n\n" + "\n".join(f"‚Ä¢ {o}" for o in oblasts)
        await bot.send_message(chat_id=admin_id, text=text, parse_mode="Markdown")
    except Exception as e:
        await bot.send_message(chat_id=admin_id, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API:\n{e}")

# ======================================================
# üîπ –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ú–†–ß (–≤—Å—è –£–∫—Ä–∞—ó–Ω–∞) + –æ–∫—Ä–µ–º–∏–π –ú–†–ß –¥–ª—è –ö–∏—ó–≤—â–∏–Ω–∏
# ======================================================
async def process_alerts(app, cache_global: RegionAlertCache, cache_kyiv: RegionAlertCache):
    """
    - –ê–¥–º—ñ–Ω—É (ADMIN_ID): —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—Å—ñ –æ–±–ª–∞—Å—Ç—ñ (–≥–ª–æ–±–∞–ª—å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥).
    - –ì—Ä—É–ø—ñ (CHAT_ID): –ª–∏—à–µ –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å —ñ –º. –ö–∏—ó–≤ + –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ç—Ä–∏–≤–æ–≥–∏.
    - –û–∫—Ä–µ–º–∏–π –∫–µ—à –¥–ª—è –ö–∏—ó–≤—â–∏–Ω–∏, —â–æ–± –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏ "–∑–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥–±—ñ–π –ø–æ –æ–±–ª–∞—Å—Ç—ñ".
    """
    data = await _get_api_data()
    alerts = data.get("alerts", [])

    # –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω: –∫–ª—é—á "<–æ–±–ª–∞—Å—Ç—å>::<title>" -> type
    new_state_global = {f"{a['location_oblast']}::{a['location_title']}": a["alert_type"] for a in alerts}

    # –ö–∏—ó–≤—Å—å–∫–∏–π —Å—Ç–∞–Ω: –ª–∏—à–µ –ø–æ –ö–∏—ó–≤—â–∏–Ω—ñ, –∫–ª—é—á "<title>" -> type
    relevant_kyiv = [a for a in alerts if a.get("location_oblast") in KYIV_OBLAST_NAMES]
    new_state_kyiv = {a["location_title"]: a["alert_type"] for a in relevant_kyiv}

    chat_id = get_chat_id(app)
    admin_chat = int(ADMIN_ID)
    now = datetime.now().strftime("%H:%M:%S")
    logging.info(f"‚è± –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API @ {now} (UA={len(new_state_global)}, KYIV={len(new_state_kyiv)})")

    # --- –ü–ï–†–®–ò–ô –ó–ê–ü–£–°–ö ---
    if not cache_global.initialized:
        cache_global.last_alerts = new_state_global
        cache_global.initialized = True
    if not cache_kyiv.initialized:
        cache_kyiv.last_alerts = new_state_kyiv
        cache_kyiv.initialized = True
        return  # –ø–µ—Ä—à–∏–π —Ü–∏–∫–ª ‚Äî –±–µ–∑ —Å–ø–æ–≤—ñ—â–µ–Ω—å, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏ —Å—Ç–∞—Ä–∏–º —Å—Ç–∞–Ω–æ–º

    # --- –ì–õ–û–ë–ê–õ–¨–ù–Ü –°–ü–û–í–Ü–©–ï–ù–ù–Ø (–∞–¥–º—ñ–Ω—É) ---
    # –ù–æ–≤—ñ –∞–±–æ –∑–º—ñ–Ω–µ–Ω—ñ
    for key, alert_type in new_state_global.items():
        if cache_global.last_alerts.get(key) != alert_type and admin_chat:
            oblast, title = key.split("::")
            text = f"üö® {oblast} ‚Äî {title}: {ALERT_TYPES_UA.get(alert_type, alert_type)}"
            await app.bot.send_message(chat_id=admin_chat, text=text)
    # –í—ñ–¥–±–æ—ó
    for key in list(cache_global.last_alerts.keys()):
        if key not in new_state_global and admin_chat:
            oblast, title = key.split("::")
            text = f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {oblast} ‚Äî {title}"
            await app.bot.send_message(chat_id=admin_chat, text=text)

    # --- –°–ü–û–í–Ü–©–ï–ù–ù–Ø –î–õ–Ø –ì–†–£–ü–ò (–ª–∏—à–µ –ö–∏—ó–≤—â–∏–Ω–∞) ---
    # –ù–æ–≤—ñ –∞–±–æ –∑–º—ñ–Ω–µ–Ω—ñ
    for title, alert_type in new_state_kyiv.items():
        if cache_kyiv.last_alerts.get(title) != alert_type and chat_id:
            await send_photo_safe(app.bot, chat_id, "images/Alarm.jpg")
            text = f"üö® *{title}* ‚Äî *{ALERT_TYPES_UA.get(alert_type, alert_type)}*"
            await app.bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")

    # –í—ñ–¥–±–æ—ó –ø–æ —Ä–∞–π–æ–Ω–∞—Ö –ö–∏—ó–≤—â–∏–Ω–∏
    for title in list(cache_kyiv.last_alerts.keys()):
        if title not in new_state_kyiv and chat_id:
            await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É *{title}*", parse_mode="Markdown")

    # –ó–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥–±—ñ–π –ø–æ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ (–∫–æ–ª–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–π–æ–Ω –ø–æ–≥–∞—Å)
    if cache_kyiv.last_alerts and not new_state_kyiv and chat_id:
        await app.bot.send_message(chat_id=chat_id, text=f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {REGION}")
        await send_photo_safe(app.bot, chat_id, "images/Clear.jpg")

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à—ñ
    cache_global.last_alerts = new_state_global
    cache_kyiv.last_alerts  = new_state_kyiv

# ======================================================
# üîπ –†—É—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö/–º—ñ—Å—Ç–∞—Ö
# ======================================================
async def _region_status_contains(keyword: str) -> bool:
    data = await _get_api_data()
    kw = keyword.lower()
    for a in data.get("alerts", []):
        if a.get("finished_at") is None:
            oblast = (a.get("location_oblast") or "").lower()
            title = (a.get("location_title") or "").lower()
            if kw in oblast or kw in title:
                return True
    return False

async def krym_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status_contains("–∫—Ä–∏–º")
    await update.message.reply_text("üö® –£ –ö—Ä–∏–º—É —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –£ –ö—Ä–∏–º—É –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def odesa_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status_contains("–æ–¥–µ—Å")
    await update.message.reply_text("üö® –í –û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –í –û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def oblast_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status_contains("–∫–∏—ó–≤—Å—å–∫–∞")
    await update.message.reply_text("üö® –£ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –£ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def kyiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status_contains("–∫–∏—ó–≤")
    await update.message.reply_text("üö® –£ –ö–∏—î–≤—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –£ –ö–∏—î–≤—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def lugansk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status_contains("–ª—É–≥–∞–Ω")
    await update.message.reply_text("üö® –£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –£ –õ—É–≥–∞–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def chernihiv_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status_contains("—á–µ—Ä–Ω—ñ–≥")
    await update.message.reply_text("üö® –£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –£ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

async def frankivsk_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = await _region_status_contains("—Ñ—Ä–∞–Ω–∫")
    await update.message.reply_text("üö® –í –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!" if active else "‚úÖ –í –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑ –≤—Å–µ —á–∏—Å—Ç–æ.")

# ======================================================
# üîπ –°–õ–û–í–ù–ò–ö–û–í–Ü –ó–ê–ü–ò–¢–ò + –ê–î–î–û–ù ‚Äú–°–æ—Ü—ñ–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è‚Äù
# ======================================================
def get_kyiv_dict(app) -> Dict[str, str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –º–∞–ø—É alias -> '–†–∞–π–æ–Ω –ö–∏—ó–≤—â–∏–Ω–∏' (–ª–∏—à–µ —Ä–æ–∑–¥—ñ–ª –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ)."""
    return app.bot_data.get("locations_dict", {}).get("–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", {})

async def handle_dynamic_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ '—â–æ –ø–æ <—Ö>' –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞; —è–∫—â–æ –ù–ü –Ω–µ–≤—ñ–¥–æ–º–∏–π ‚Äî –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É."""
    text_raw = update.message.text or ""
    text = text_raw.lower().strip()
    if not text.startswith("—â–æ –ø–æ"):
        return

    # –í—ñ–¥—Å—ñ–∫–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ñ—Ä–∞–∑–∏ (—Ä—É—á–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏)
    guard_phrases = [
        "—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ", "—â–æ –ø–æ –∫–∏—î–≤—É", "—è–∫ —Ç–∞–º –∫—Ä–∏–º", "—â–æ –ø–æ –æ–¥–µ—Å", "—â–æ –ø–æ –ª—É–≥–∞–Ω",
        "—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫—É", "—â–æ –ø–æ —ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—É", "—â–æ –ø–æ —Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—É", "—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"
    ]
    if any(p in text for p in guard_phrases):
        return

    kyiv_map = get_kyiv_dict(context.application)
    keyword = text.replace("—â–æ –ø–æ", "").replace("?", "").strip().lower()

    # —Å–ø—Ä–æ–±–∞ —Ç–æ—á–Ω–æ–≥–æ/—á–∞—Å—Ç–∫–æ–≤–æ–≥–æ –∑–±—ñ–≥—É –ø–æ —Å–ª–æ–≤–Ω–∏–∫—É –ö–∏—ó–≤—â–∏–Ω–∏
    region = None
    for alias, subregion in kyiv_map.items():
        if keyword == alias.lower() or keyword in alias.lower():
            region = subregion
            break

    if region:
        # –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∑–∞ –ú–†–ß-—Å—Ç–∞–Ω–æ–º –ö–∏—ó–≤—â–∏–Ω–∏
        cache_kyiv: RegionAlertCache = context.application.bot_data.get("cache_kyiv", RegionAlertCache())
        active_kyiv = cache_kyiv.last_alerts or {}
        if region in active_kyiv:
            await update.message.reply_text(f"üö® –£ {region} —Ç—Ä–∏–≤–∞—î —Ç—Ä–∏–≤–æ–≥–∞!")
        else:
            await update.message.reply_text(f"‚úÖ –£ {region} –∑–∞—Ä–∞–∑ –≤—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ.")
        return

    # --- –ù–µ–≤—ñ–¥–æ–º–∏–π –ù–ü: –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É ---
    markup = ReplyKeyboardMarkup(
        [[KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ")]],
        one_time_keyboard=True, resize_keyboard=True
    )
    await update.message.reply_text(
        "ü§î –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—É –≥—Ä—É–ø–∏ —â–æ–± –¥–æ–¥–∞—Ç–∏? (—Ç–∞–∫/–Ω—ñ)",
        reply_markup=markup,
    )
    # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data["pending_location"] = keyword

async def user_yes_no(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¢–∞–∫/–ù—ñ —â–æ–¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –ù–ü."""
    ans = (update.message.text or "").strip().lower()
    if ans not in {"—Ç–∞–∫", "–Ω—ñ"}:
        return
    keyword = context.user_data.get("pending_location")
    if not keyword:
        return

    if ans == "–Ω—ñ":
        await update.message.reply_text("üôÇ –î–æ–±—Ä–µ, –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –∞–¥–º—ñ–Ω—É.")
        context.user_data.pop("pending_location", None)
        return

    # "—Ç–∞–∫": –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏, –≤—à–∏–≤–∞—î–º–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì© –ù–æ–≤–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º:\n<b>{keyword.title()}</b>\n–î–æ–¥–∞—Ç–∏ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞?",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton(f"‚úÖ –î–æ–¥–∞—Ç–∏: {keyword}"), KeyboardButton(f"‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏: {keyword}")]],
            resize_keyboard=True
        ),
    )
    await update.message.reply_text("‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.")
    context.user_data.pop("pending_location", None)

async def admin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î/—ñ–≥–Ω–æ—Ä—É—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é, –¥–∞–ª—ñ ‚Äî –≤–∏–±—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ/—Ä–∞–π–æ–Ω—É."""
    if update.effective_user.id != ADMIN_ID:
        return
    text = (update.message.text or "").strip()

    # –û—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç "‚úÖ –î–æ–¥–∞—Ç–∏: <keyword>" –∞–±–æ "‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏: <keyword>"
    if text.startswith("‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏:"):
        await update.message.reply_text("üö´ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        return

    if not text.startswith("‚úÖ –î–æ–¥–∞—Ç–∏:"):
        return

    keyword = text.split(":", 1)[1].strip()
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ bot_data, –∑ –∫–∏–º –ø—Ä–∞—Ü—é—î–º–æ
    context.application.bot_data["pending_keyword"] = keyword

    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–±–ª–∞—Å—Ç—è–º–∏ (—Å—Ç–∞—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫)
    rows = [[KeyboardButton(o)] for o in OBLASTS_ALL]
    await update.message.reply_text(
        f"üåç –û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è ¬´{keyword.title()}¬ª:",
        reply_markup=ReplyKeyboardMarkup(rows, resize_keyboard=True)
    )
    context.application.bot_data["await_region"] = True

async def region_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º—ñ–Ω –æ–±–∏—Ä–∞—î –æ–±–ª–∞—Å—Ç—å; —è–∫—â–æ —Ü–µ –ö–∏—ó–≤—Å—å–∫–∞ ‚Äî –ø—Ä–æ—Å–∏–º–æ —â–µ —Ä–∞–π–æ–Ω, —ñ–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ –æ–¥—Ä–∞–∑—É."""
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.application.bot_data.get("await_region"):
        return

    region = (update.message.text or "").strip()
    keyword = context.application.bot_data.get("pending_keyword")
    if not keyword or not region:
        return

    context.application.bot_data["await_region"] = False
    context.application.bot_data["chosen_region"] = region

    if region == "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":
        rows = [[KeyboardButton(r)] for r in KYIV_SUBREGIONS]
        await update.message.reply_text(
            f"üèûÔ∏è –î–æ —è–∫–æ–≥–æ —Ä–∞–π–æ–Ω—É –Ω–∞–ª–µ–∂–∏—Ç—å ¬´{keyword.title()}¬ª?",
            reply_markup=ReplyKeyboardMarkup(rows, resize_keyboard=True)
        )
        context.application.bot_data["await_subregion"] = True
        return

    # –Ü–Ω—à–∞ –æ–±–ª–∞—Å—Ç—å: –¥–æ–¥–∞—î–º–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä–æ–∑–¥—ñ–ª —Å–ª–æ–≤–Ω–∏–∫–∞ (–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
    data = load_locations_dict()
    if region not in data:
        data[region] = {}
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –ø—Ä–æ—Å—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å alias->–æ–±–ª–∞—Å—Ç—å
    data[region][keyword] = region
    save_locations_dict(data)
    context.application.bot_data["locations_dict"] = data

    await update.message.reply_text(f"üÜï –î–æ–¥–∞–Ω–æ: {keyword.title()} ‚Üí {region}")
    # –ß–∏—Å—Ç–∏–º–æ —Å—Ç–∞–Ω
    context.application.bot_data.pop("pending_keyword", None)
    context.application.bot_data.pop("chosen_region", None)

async def subregion_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º—ñ–Ω –æ–±–∏—Ä–∞—î —Ä–∞–π–æ–Ω –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ ‚Äî –∑–∞–ø–∏—Å —É —Å–ª–æ–≤–Ω–∏–∫ –ö–∏—ó–≤—â–∏–Ω–∏."""
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.application.bot_data.get("await_subregion"):
        return

    subregion = (update.message.text or "").strip()
    if subregion not in KYIV_SUBREGIONS:
        return

    keyword = context.application.bot_data.get("pending_keyword")
    if not keyword:
        return

    data = load_locations_dict()
    if "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å" not in data:
        data["–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"] = {}
    data["–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"][keyword] = subregion
    save_locations_dict(data)
    context.application.bot_data["locations_dict"] = data

    await update.message.reply_text(f"üÜï –î–æ–¥–∞–Ω–æ: {keyword.title()} ‚Üí {subregion}")

    # –ß–∏—Å—Ç–∏–º–æ —Å—Ç–∞–Ω
    context.application.bot_data.pop("await_subregion", None)
    context.application.bot_data.pop("pending_keyword", None)
    context.application.bot_data.pop("chosen_region", None)

# ======================================================
# üîπ –ö–æ–º–∞–Ω–¥–∏ /start /stopbot /list_regions
# ======================================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.application.bot_data["chat_id"] = update.effective_chat.id
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç üå∏\n"
        "–ì—Ä—É–ø–∞ –æ—Ç—Ä–∏–º—É—î —Ç—Ä–∏–≤–æ–≥–∏ –ø–æ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ.\n"
        "–ú–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏: ¬´—â–æ –ø–æ —ñ—Ä–ø–µ–Ω—é?¬ª –∞–±–æ ¬´—â–æ –ø–æ –±–æ—Ä–∏—Å–ø–æ–ª—é?¬ª"
    )

async def stopbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await update.message.reply_text("üõë –ó—É–ø–∏–Ω—è—é —Ä–æ–±–æ—Ç—É...")
    asyncio.create_task(_shutdown_sequence(context.application))

async def _shutdown_sequence(app):
    try:
        app.job_queue.stop()
        await app.shutdown()
        await app.stop()
    except Exception:
        pass
    asyncio.get_event_loop().stop()

async def list_regions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await update.message.reply_text("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π...")
    await send_all_oblasts_to_admin(context.bot, ADMIN_ID)

async def error_handler(update, context):
    logging.error("–ü–æ–º–∏–ª–∫–∞:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")

# ======================================================
# üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# ======================================================
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    if DEFAULT_CHAT_ID:
        app.bot_data["chat_id"] = DEFAULT_CHAT_ID
        app.bot_data["default_chat_id"] = DEFAULT_CHAT_ID

    # –ö–µ—à—ñ: –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–∞ –ö–∏—ó–≤—â–∏–Ω–∞ ‚Äî –æ–∫—Ä–µ–º–æ!
    cache_global = RegionAlertCache()
    cache_kyiv   = RegionAlertCache()
    app.bot_data["cache_kyiv"] = cache_kyiv

    # –°–ª–æ–≤–Ω–∏–∫
    app.bot_data["locations_dict"] = load_locations_dict()

    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π –∞–¥–º—ñ–Ω—É
    await send_all_oblasts_to_admin(app.bot, ADMIN_ID)

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stopbot", stopbot))
    app.add_handler(CommandHandler("list_regions", list_regions))

    # –†—É—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ (—Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ) ‚Äî –î–û –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–æ–≥–æ
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"), oblast_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –∫–∏—î–≤—É"), kyiv_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—è–∫ —Ç–∞–º –∫—Ä–∏–º"), krym_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –æ–¥–µ—Å"), odesa_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —Ñ—Ä–∞–Ω–∏–∫—É|—â–æ –ø–æ —ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—É|—â–æ –ø–æ —Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—É"), frankivsk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ –ª—É–≥–∞–Ω"), lugansk_alerts))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)—â–æ –ø–æ —á–µ—Ä–Ω—ñ–≥"), chernihiv_alerts))

    # –°–ª–æ–≤–Ω–∏–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^—â–æ –ø–æ "), handle_dynamic_query))
    # –°–æ—Ü—ñ–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è: –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äú—Ç–∞–∫/–Ω—ñ‚Äù
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^(—Ç–∞–∫|–Ω—ñ)$"), user_yes_no))
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–º
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^(‚úÖ –î–æ–¥–∞—Ç–∏: .+|‚ùå –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏: .+)$"), admin_choice))
    # –í–∏–±—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ –∞–¥–º—ñ–Ω–æ–º
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^(" + "|".join(map(lambda s: s.replace('.', r'\.'), OBLASTS_ALL)) + r")$"), region_selected))
    # –í–∏–±—ñ—Ä —Ä–∞–π–æ–Ω—É –ö–∏—ó–≤—â–∏–Ω–∏ –∞–¥–º—ñ–Ω–æ–º
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^(" + "|".join(KYIV_SUBREGIONS) + r")$"), subregion_selected))

    app.add_error_handler(error_handler)

    async def _poll(context: ContextTypes.DEFAULT_TYPE):
        await process_alerts(context.application, cache_global, cache_kyiv)

    app.job_queue.run_repeating(_poll, interval=POLL_INTERVAL, first=0)
    app.job_queue.start()

    logging.info("‚úÖ KytsjaAlarm Stable_v6 + SocialLearning –∞–¥–¥–æ–Ω ‚Äî –∑–∞–ø—É—â–µ–Ω–æ.")
    await app.run_polling(close_loop=False)

# ======================================================
# üîπ –ó–∞–ø—É—Å–∫
# ======================================================
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.create_task(main())
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        for task in asyncio.all_tasks():
            task.cancel()
        loop.close()
        logging.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
